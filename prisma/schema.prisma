// This is your Prisma schema file
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Клиенты
model Client {
  id           Int            @id @default(autoincrement())
  fullName     String        @map("full_name")
  phone        String        @unique
  photoUrl     String?       @map("photo_url")
  telegramId   String?       @unique @map("telegram_id")
  qrCode       String?       @default("qr") @map("qr_code")
  createdAt    DateTime      @default(now()) @map("created_at")
  updatedAt    DateTime      @updatedAt @map("updated_at")

  // Связи
  subscriptions Subscription[]
  visits       Visit[]
  feedback     Feedback[]

  @@map("clients")
}

// Тарифы
model Tariff {
  id           Int            @id @default(autoincrement())
  name         String
  price        Decimal
  durationDays Int           @map("duration_days")
  duration     Int           @default(1) // срок действия тарифа в месяцах
  freezeLimit  Int           @map("freeze_limit")
  startTime    String        @default("06:00") @map("start_time") // время начала работы
  endTime      String        @default("23:00") @map("end_time")   // время окончания работы
  createdAt    DateTime      @default(now()) @map("created_at")
  updatedAt    DateTime      @updatedAt @map("updated_at")

  // Связи
  subscriptions Subscription[]

  @@map("tariffs")
}

// Абонементы клиентов
model Subscription {
  id           Int            @id @default(autoincrement())
  clientId     Int           @map("client_id")
  tariffId     Int           @map("tariff_id")
  startDate    DateTime      @map("start_date")
  endDate      DateTime      @map("end_date")
  status       String        @default("active") // active, frozen, completed
  freezeUsed   Int           @default(0) @map("freeze_used")
  remainingDays Int          @map("remaining_days")
  createdAt    DateTime      @default(now()) @map("created_at")
  updatedAt    DateTime      @updatedAt @map("updated_at")

  // Связи
  client       Client        @relation(fields: [clientId], references: [id])
  tariff       Tariff        @relation(fields: [tariffId], references: [id])
  visits       Visit[]

  @@map("subscriptions")
}

// Посещения
model Visit {
  id             Int            @id @default(autoincrement())
  clientId       Int           @map("client_id")
  subscriptionId Int           @map("subscription_id")
  visitDate      DateTime      @map("visit_date")
  qrCode         String        @unique @map("qr_code")
  isFreezeDay    Boolean       @default(false) @map("is_freeze_day")

  // Связи
  client         Client        @relation(fields: [clientId], references: [id])
  subscription   Subscription  @relation(fields: [subscriptionId], references: [id])

  @@map("visits")
}

// Товары
model Product {
  id          Int            @id @default(autoincrement())
  name        String
  description String
  price       Decimal
  photoUrl    String?       @map("photo_url")
  createdAt   DateTime      @default(now()) @map("created_at")
  updatedAt   DateTime      @updatedAt @map("updated_at")

  @@map("products")
}

// Сообщения для рассылок
model News {
  id          Int            @id @default(autoincrement())
  title       String
  content     String        @db.Text
  photoUrl    String?       @map("photo_url")
  createdAt   DateTime      @default(now()) @map("created_at")
  updatedAt   DateTime      @updatedAt @map("updated_at")

  // Связи
  sendResults SendResult[]

  @@map("news")
}

// Результаты рассылок
model SendResult {
  id               Int            @id @default(autoincrement())
  newsId          Int           @map("news_id")
  filterType      String        @map("filter_type")
  filterParams    Json?         @map("filter_params")
  totalRecipients Int           @map("total_recipients")
  successCount    Int           @map("success_count")
  failedCount     Int           @map("failed_count")
  pendingCount    Int           @default(0) @map("pending_count")
  status          String        @default("pending") // pending, in_progress, completed, failed
  errorDetails    Json?         @map("error_details")
  sentAt          DateTime      @map("sent_at")
  completedAt     DateTime?     @map("completed_at")
  createdAt       DateTime      @default(now()) @map("created_at")

  // Связи
  news            News          @relation(fields: [newsId], references: [id], onDelete: Cascade)

  @@map("send_results")
}

model Feedback {
  id          Int        @id @default(autoincrement())
  clientId    Int?       @map("client_id") // null если пишет админ
  parentId    Int?       @map("parent_id") // ссылка на родительское сообщение
  senderRole  String     @map("sender_role") // user, admin
  message     String     @db.Text
  createdAt   DateTime   @default(now()) @map("created_at")

  // Связи
  client      Client?     @relation(fields: [clientId], references: [id])
  parent      Feedback?   @relation("FeedbackReplies", fields: [parentId], references: [id])
  replies     Feedback[]  @relation("FeedbackReplies")

  @@map("feedback")
}

// Контакты клуба
model Contact {
  id           Int            @id @default(autoincrement())
  phone        String
  address      String
  socialLinks  Json          @map("social_links")
  mapLink      String        @map("map_link")

  @@map("contacts")
}

// Настройки
model Setting {
  id          Int            @id @default(autoincrement())
  key         String        @unique
  value       String        @db.Text
  createdAt   DateTime      @default(now()) @map("created_at")
  updatedAt   DateTime      @updatedAt @map("updated_at")

  @@map("settings")
}