import { NextRequest, NextResponse } from 'next/server';
import { prisma } from '@/lib/prisma';

// GET - –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã –∏ –∏—Ö —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
export async function GET() {
  try {
    const now = new Date();
    
    // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Ä–∞–∑–ª–∏—á–Ω—ã–º —Ñ–∏–ª—å—Ç—Ä–∞–º
    const [
      totalClientsWithTelegram,
      expiringSoonCount,
      noVisitsCount,
      newClientsCount,
      frozenSubscriptionsCount,
      tariffs
    ] = await Promise.all([
      // –í—Å–µ–≥–æ –∫–ª–∏–µ–Ω—Ç–æ–≤ —Å Telegram
      prisma.client.count({
        where: { telegramId: { not: null } }
      }),
      
      // –ö–ª–∏–µ–Ω—Ç—ã —Å –∑–∞–∫–∞–Ω—á–∏–≤–∞—é—â–∏–º–∏—Å—è –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞–º–∏ (7 –¥–Ω–µ–π)
      prisma.client.count({
        where: {
          telegramId: { not: null },
          subscriptions: {
            some: {
              status: 'active',
              endDate: {
                gte: now,
                lte: new Date(Date.now() + 7 * 24 * 60 * 60 * 1000)
              }
            }
          }
        }
      }),
      
      // –ö–ª–∏–µ–Ω—Ç—ã –±–µ–∑ –ø–æ—Å–µ—â–µ–Ω–∏–π –∑–∞ 30 –¥–Ω–µ–π
      prisma.client.count({
        where: {
          telegramId: { not: null },
          AND: [
            {
              OR: [
                { visits: { none: {} } },
                {
                  visits: {
                    none: {
                      visitDate: { gte: new Date(Date.now() - 30 * 24 * 60 * 60 * 1000) }
                    }
                  }
                }
              ]
            }
          ]
        }
      }),
      
      // –ù–æ–≤—ã–µ –∫–ª–∏–µ–Ω—Ç—ã –∑–∞ 7 –¥–Ω–µ–π
      prisma.client.count({
        where: {
          telegramId: { not: null },
          createdAt: { gte: new Date(Date.now() - 7 * 24 * 60 * 60 * 1000) }
        }
      }),
      
      // –ö–ª–∏–µ–Ω—Ç—ã —Å –∑–∞–º–æ—Ä–æ–∂–µ–Ω–Ω—ã–º–∏ –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞–º–∏
      prisma.client.count({
        where: {
          telegramId: { not: null },
          subscriptions: {
            some: {
              status: 'frozen'
            }
          }
        }
      }),
      
      // –¢–∞—Ä–∏—Ñ—ã —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤
      prisma.tariff.findMany({
        include: {
          _count: {
            select: {
              subscriptions: {
                where: {
                  status: 'active',
                  client: {
                    telegramId: { not: null }
                  }
                }
              }
            }
          }
        }
      })
    ]);

    const filters = [
      {
        id: 'all',
        name: '–í—Å–µ –∫–ª–∏–µ–Ω—Ç—ã',
        description: '–í—Å–µ–º –∫–ª–∏–µ–Ω—Ç–∞–º —Å Telegram',
        count: totalClientsWithTelegram,
        icon: 'üë•'
      },
      {
        id: 'expiring_soon',
        name: '–ó–∞–∫–∞–Ω—á–∏–≤–∞—é—â–∏–µ—Å—è –∞–±–æ–Ω–µ–º–µ–Ω—Ç—ã',
        description: '–ö–ª–∏–µ–Ω—Ç—ã —Å –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞–º–∏, –∑–∞–∫–∞–Ω—á–∏–≤–∞—é—â–∏–º–∏—Å—è –≤ –±–ª–∏–∂–∞–π—à–∏–µ –¥–Ω–∏',
        count: expiringSoonCount,
        icon: '‚è∞',
        params: {
          days: { type: 'number', default: 7, label: '–î–Ω–µ–π –¥–æ –æ–∫–æ–Ω—á–∞–Ω–∏—è' }
        }
      },
      {
        id: 'no_visits',
        name: '–î–∞–≤–Ω–æ –Ω–µ –ø–æ—Å–µ—â–∞–ª–∏',
        description: '–ö–ª–∏–µ–Ω—Ç—ã –±–µ–∑ –ø–æ—Å–µ—â–µ–Ω–∏–π –∑–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥',
        count: noVisitsCount,
        icon: 'üò¥',
        params: {
          days: { type: 'number', default: 30, label: '–î–Ω–µ–π –±–µ–∑ –ø–æ—Å–µ—â–µ–Ω–∏–π' }
        }
      },
      {
        id: 'new_clients',
        name: '–ù–æ–≤—ã–µ –∫–ª–∏–µ–Ω—Ç—ã',
        description: '–ù–µ–¥–∞–≤–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç—ã',
        count: newClientsCount,
        icon: 'üÜï',
        params: {
          days: { type: 'number', default: 7, label: '–î–Ω–µ–π —Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏' }
        }
      },
      {
        id: 'frozen_subscriptions',
        name: '–ó–∞–º–æ—Ä–æ–∂–µ–Ω–Ω—ã–µ –∞–±–æ–Ω–µ–º–µ–Ω—Ç—ã',
        description: '–ö–ª–∏–µ–Ω—Ç—ã —Å –∑–∞–º–æ—Ä–æ–∂–µ–Ω–Ω—ã–º–∏ –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞–º–∏',
        count: frozenSubscriptionsCount,
        icon: 'üßä'
      },
      {
        id: 'by_tariff',
        name: '–ü–æ —Ç–∞—Ä–∏—Ñ—É',
        description: '–ö–ª–∏–µ–Ω—Ç—ã —Å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–º —Ç–∞—Ä–∏—Ñ–æ–º',
        count: 0, // –ë—É–¥–µ—Ç –ø–µ—Ä–µ—Å—á–∏—Ç–∞–Ω–æ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Ç–∞—Ä–∏—Ñ–∞
        icon: 'üíé',
        params: {
          tariffId: { 
            type: 'select', 
            label: '–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ',
            options: tariffs.map(tariff => ({
              value: tariff.id,
              label: tariff.name,
              count: tariff._count.subscriptions
            }))
          }
        }
      }
    ];

    return NextResponse.json({ filters });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤:', error);
    return NextResponse.json(
      { error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤' },
      { status: 500 }
    );
  }
}

// POST - –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–µ–≤—å—é –∫–ª–∏–µ–Ω—Ç–æ–≤ –ø–æ —Ñ–∏–ª—å—Ç—Ä—É
export async function POST(request: NextRequest) {
  try {
    const body = await request.json();
    const { filterType, filterParams } = body;

    if (!filterType) {
      return NextResponse.json(
        { error: '–¢–∏–ø —Ñ–∏–ª—å—Ç—Ä–∞ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω' },
        { status: 400 }
      );
    }

    // –ü–æ–ª—É—á–∞–µ–º –∫–ª–∏–µ–Ω—Ç–æ–≤ –ø–æ —Ñ–∏–ª—å—Ç—Ä—É (–ª–æ–≥–∏–∫–∞ —Ç–∞–∫–∞—è –∂–µ –∫–∞–∫ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º API)
    const clients = await getFilteredClients(filterType, filterParams);
    const telegramClients = clients.filter(client => client.telegramId);

    return NextResponse.json({
      count: telegramClients.length,
      preview: telegramClients.slice(0, 10).map(client => ({
        id: client.id,
        fullName: client.fullName,
        phone: client.phone,
        telegramId: client.telegramId
      }))
    });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–µ–≤—å—é:', error);
    return NextResponse.json(
      { error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–µ–≤—å—é' },
      { status: 500 }
    );
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤ –ø–æ —Ñ–∏–ª—å—Ç—Ä—É (–¥—É–±–ª–∏—Ä—É–µ–º –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ API)
async function getFilteredClients(filterType: string, filterParams?: any) {
  const now = new Date();
  
  switch (filterType) {
    case 'all':
      return await prisma.client.findMany({
        where: {
          telegramId: { not: null }
        }
      });

    case 'expiring_soon':
      const daysAhead = filterParams?.days || 7;
      const expirationDate = new Date();
      expirationDate.setDate(now.getDate() + daysAhead);
      
      return await prisma.client.findMany({
        where: {
          telegramId: { not: null },
          subscriptions: {
            some: {
              status: 'active',
              endDate: {
                gte: now,
                lte: expirationDate
              }
            }
          }
        }
      });

    case 'no_visits':
      const daysSinceLastVisit = filterParams?.days || 30;
      const cutoffDate = new Date();
      cutoffDate.setDate(now.getDate() - daysSinceLastVisit);
      
      return await prisma.client.findMany({
        where: {
          telegramId: { not: null },
          AND: [
            {
              OR: [
                { visits: { none: {} } },
                {
                  visits: {
                    none: {
                      visitDate: { gte: cutoffDate }
                    }
                  }
                }
              ]
            }
          ]
        }
      });

    case 'by_tariff':
      const tariffId = filterParams?.tariffId;
      if (!tariffId) return [];
      
      return await prisma.client.findMany({
        where: {
          telegramId: { not: null },
          subscriptions: {
            some: {
              status: 'active',
              tariffId: parseInt(tariffId)
            }
          }
        }
      });

    case 'new_clients':
      const daysAgo = filterParams?.days || 7;
      const startDate = new Date();
      startDate.setDate(now.getDate() - daysAgo);
      
      return await prisma.client.findMany({
        where: {
          telegramId: { not: null },
          createdAt: { gte: startDate }
        }
      });

    case 'frozen_subscriptions':
      return await prisma.client.findMany({
        where: {
          telegramId: { not: null },
          subscriptions: {
            some: {
              status: 'frozen'
            }
          }
        }
      });

    default:
      return [];
  }
}
