import { NextRequest, NextResponse } from 'next/server';
import { uploadToS3, generateFileName, deleteFromS3 } from '@/lib/s3';

export async function POST(request: NextRequest) {
  try {
    const formData = await request.formData();
    
    const files = formData.getAll('files') as File[];
    const folder = formData.get('folder') as string || 'clients';

    // –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –∫–∞–∫ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö, —Ç–∞–∫ –∏ –æ–¥–∏–Ω–æ—á–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
    const singleFile = formData.get('file') as File;
    const filesToProcess = files.length > 0 ? files : (singleFile ? [singleFile] : []);

    console.log(`üì§ –ó–∞–≥—Ä—É–∑–∫–∞ ${filesToProcess.length} —Ñ–∞–π–ª(–æ–≤) –≤ –ø–∞–ø–∫—É "${folder}"`);

    if (filesToProcess.length === 0) {
      return NextResponse.json(
        { error: '–§–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã' },
        { status: 400 }
      );
    }

    // –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –Ω–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–∞–π–ª–æ–≤ (–º–∞–∫—Å–∏–º—É–º 10)
    if (filesToProcess.length > 10) {
      return NextResponse.json(
        { error: '–ú–∞–∫—Å–∏–º—É–º –º–æ–∂–Ω–æ –∑–∞–≥—Ä—É–∑–∏—Ç—å 10 —Ñ–∞–π–ª–æ–≤ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ' },
        { status: 400 }
      );
    }

    const uploadedFiles = [];

    for (const file of filesToProcess) {
      if (!file) continue;

      console.log(`üìÅ ${file.name} (${(file.size / 1024 / 1024).toFixed(2)} MB)`);

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø —Ñ–∞–π–ª–∞
      const allowedTypes = ['image/jpeg', 'image/png', 'image/webp', 'image/gif'];
      if (!allowedTypes.includes(file.type)) {
        return NextResponse.json(
          { error: `–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø —Ñ–∞–π–ª–∞ ${file.name}. –†–∞–∑—Ä–µ—à–µ–Ω—ã: JPEG, PNG, WebP, GIF` },
          { status: 400 }
        );
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ (–º–∞–∫—Å–∏–º—É–º 5MB)
      const maxSize = 5 * 1024 * 1024; // 5MB
      if (file.size > maxSize) {
        return NextResponse.json(
          { error: `–†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ ${file.name} –Ω–µ –¥–æ–ª–∂–µ–Ω –ø—Ä–µ–≤—ã—à–∞—Ç—å 5MB` },
          { status: 400 }
        );
      }

      // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Ñ–∞–π–ª –≤ –±—É—Ñ–µ—Ä
      const arrayBuffer = await file.arrayBuffer();
      const buffer = Buffer.from(arrayBuffer);

      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
      const fileName = generateFileName(file.name);

      // –ó–∞–≥—Ä—É–∂–∞–µ–º –≤ S3
      try {
        const fileUrl = await uploadToS3(buffer, fileName, file.type, folder);
        console.log(`‚úÖ ${file.name} ‚Üí ${fileUrl}`);

        uploadedFiles.push({
          url: fileUrl,
          fileName: fileName,
          originalName: file.name,
          size: file.size,
          type: file.type
        });
      } catch (s3Error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ ${file.name}:`, s3Error);
        throw new Error(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞ ${file.name} –≤ S3: ${s3Error instanceof Error ? s3Error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`);
      }
    }

    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ, —Å–æ–≤–º–µ—Å—Ç–∏–º–æ–º —Å –∫–ª–∏–µ–Ω—Ç–∞–º–∏
    if (uploadedFiles.length === 1) {
      // –î–ª—è –æ–¥–∏–Ω–æ—á–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ (–∫–∞–∫ AddClientModal)
      return NextResponse.json({
        success: true,
        url: uploadedFiles[0].url,
        fileName: uploadedFiles[0].fileName,
        originalName: uploadedFiles[0].originalName,
        size: uploadedFiles[0].size,
        type: uploadedFiles[0].type
      });
    } else {
      // –î–ª—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
      return NextResponse.json({
        success: true,
        files: uploadedFiles,
        count: uploadedFiles.length
      });
    }

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞:', error);
    return NextResponse.json(
      { error: error instanceof Error ? error.message : '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞' },
      { status: 500 }
    );
  }
}

// DELETE /api/upload - —É–¥–∞–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ –∏–∑ S3
export async function DELETE(request: NextRequest) {
  try {
    const body = await request.json();
    const { fileUrl } = body;

    if (!fileUrl) {
      return NextResponse.json(
        { error: 'URL —Ñ–∞–π–ª–∞ –Ω–µ —É–∫–∞–∑–∞–Ω' },
        { status: 400 }
      );
    }

    await deleteFromS3(fileUrl);

    return NextResponse.json({
      success: true,
      message: '–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω'
    });

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞:', error);
    return NextResponse.json(
      { error: error instanceof Error ? error.message : '–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞' },
      { status: 500 }
    );
  }
}
