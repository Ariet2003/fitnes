import { NextRequest, NextResponse } from 'next/server';
import { prisma } from '@/lib/prisma';

// GET /api/products
export async function GET(request: NextRequest) {
  try {
    const searchParams = request.nextUrl.searchParams;
    const search = searchParams.get('search') || '';
    const sortBy = searchParams.get('sortBy') || 'createdAt';
    const sortOrder = searchParams.get('sortOrder') || 'desc';
    const page = parseInt(searchParams.get('page') || '1');
    const limit = parseInt(searchParams.get('limit') || '12');

    const skip = (page - 1) * limit;

    // –°—Ç—Ä–æ–∏–º —É—Å–ª–æ–≤–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞
    const where = search ? {
      OR: [
        { name: { contains: search, mode: 'insensitive' as const } },
        { description: { contains: search, mode: 'insensitive' as const } }
      ]
    } : {};

    // –í–∞–ª–∏–¥–Ω—ã–µ –ø–æ–ª—è –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
    const validSortFields = ['name', 'price', 'createdAt', 'updatedAt'];
    const orderBy = validSortFields.includes(sortBy) ? {
      [sortBy]: sortOrder === 'asc' ? 'asc' : 'desc'
    } : { createdAt: 'desc' };

    // –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–¥—É–∫—Ç—ã —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
    const [products, totalCount] = await Promise.all([
      prisma.product.findMany({
        where,
        orderBy,
        skip,
        take: limit,
      }),
      prisma.product.count({ where })
    ]);

    const totalPages = Math.ceil(totalCount / limit);

    return NextResponse.json({
      products,
      pagination: {
        page,
        pages: totalPages,
        total: totalCount,
        limit
      }
    });

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ–¥—É–∫—Ç–æ–≤:', error);
    return NextResponse.json(
      { error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ–¥—É–∫—Ç–æ–≤' },
      { status: 500 }
    );
  }
}

// POST /api/products
export async function POST(request: NextRequest) {
  try {
    const body = await request.json();
    const { name, description, price, photoUrls } = body;
    console.log('üìã –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç–∞ —Å', photoUrls?.length || 0, '–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏');

    // –í–∞–ª–∏–¥–∞—Ü–∏—è
    if (!name || !description || price === undefined) {
      return NextResponse.json(
        { error: '–ù–∞–∑–≤–∞–Ω–∏–µ, –æ–ø–∏—Å–∞–Ω–∏–µ –∏ —Ü–µ–Ω–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã' },
        { status: 400 }
      );
    }

    if (price < 0) {
      return NextResponse.json(
        { error: '–¶–µ–Ω–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–π' },
        { status: 400 }
      );
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å –Ω–∞–∑–≤–∞–Ω–∏—è
    const existingProduct = await prisma.product.findFirst({
      where: { name: { equals: name, mode: 'insensitive' } }
    });

    if (existingProduct) {
      return NextResponse.json(
        { error: '–ü—Ä–æ–¥—É–∫—Ç —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç' },
        { status: 400 }
      );
    }

    // –í–∞–ª–∏–¥–∏—Ä—É–µ–º –∏ –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –º–∞—Å—Å–∏–≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    let processedPhotoUrls = null;
    
    if (photoUrls && Array.isArray(photoUrls) && photoUrls.length > 0) {
      // –§–∏–ª—å—Ç—Ä—É–µ–º –ø—É—Å—Ç—ã–µ URL –∏ –≤–∞–ª–∏–¥–∏—Ä—É–µ–º
      const validUrls = photoUrls.filter(url => url && typeof url === 'string' && url.trim().length > 0);
      
      if (validUrls.length > 0) {
        processedPhotoUrls = JSON.stringify(validUrls);
        console.log(`üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–¥—É–∫—Ç "${name}" —Å ${validUrls.length} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏`);
      }
    } else {
      console.log(`üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–¥—É–∫—Ç "${name}" –±–µ–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π`);
    }

    const product = await prisma.product.create({
      data: {
        name: name.trim(),
        description: description.trim(),
        price: parseFloat(price.toString()),
        photoUrl: processedPhotoUrls
      }
    });

    console.log(`‚úÖ –ü—Ä–æ–¥—É–∫—Ç "${name}" —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω (ID: ${product.id})`);

    return NextResponse.json(product, { status: 201 });

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–æ–¥—É–∫—Ç–∞:', error);
    return NextResponse.json(
      { error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–æ–¥—É–∫—Ç–∞' },
      { status: 500 }
    );
  }
}
