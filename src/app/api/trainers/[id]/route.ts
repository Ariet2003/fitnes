import { NextRequest, NextResponse } from 'next/server';
import { prisma } from '@/lib/prisma';
import { deleteMultipleFromS3, extractImageUrls } from '@/lib/s3';

// GET /api/trainers/[id]
export async function GET(
  request: NextRequest,
  { params }: { params: { id: string } }
) {
  try {
    const id = parseInt(params.id);

    if (isNaN(id)) {
      return NextResponse.json(
        { error: '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID —Ç—Ä–µ–Ω–µ—Ä–∞' },
        { status: 400 }
      );
    }

    const trainer = await prisma.trainer.findUnique({
      where: { id }
    });

    if (!trainer) {
      return NextResponse.json(
        { error: '–¢—Ä–µ–Ω–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω' },
        { status: 404 }
      );
    }

    return NextResponse.json(trainer);

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç—Ä–µ–Ω–µ—Ä–∞:', error);
    return NextResponse.json(
      { error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç—Ä–µ–Ω–µ—Ä–∞' },
      { status: 500 }
    );
  }
}

// PUT /api/trainers/[id]
export async function PUT(
  request: NextRequest,
  { params }: { params: { id: string } }
) {
  try {
    const id = parseInt(params.id);

    if (isNaN(id)) {
      return NextResponse.json(
        { error: '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID —Ç—Ä–µ–Ω–µ—Ä–∞' },
        { status: 400 }
      );
    }

    const body = await request.json();
    const { name, description, price, photoUrls } = body;
    console.log('üìã –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç—Ä–µ–Ω–µ—Ä–∞ —Å', photoUrls?.length || 0, '–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏');

    // –í–∞–ª–∏–¥–∞—Ü–∏—è
    if (!name || !description || price === undefined) {
      return NextResponse.json(
        { error: '–ò–º—è, –æ–ø–∏—Å–∞–Ω–∏–µ –∏ —Ü–µ–Ω–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã' },
        { status: 400 }
      );
    }

    if (price < 0) {
      return NextResponse.json(
        { error: '–¶–µ–Ω–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–π' },
        { status: 400 }
      );
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ç—Ä–µ–Ω–µ—Ä–∞
    const existingTrainer = await prisma.trainer.findUnique({
      where: { id }
    });

    if (!existingTrainer) {
      return NextResponse.json(
        { error: '–¢—Ä–µ–Ω–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω' },
        { status: 404 }
      );
    }

    // –ò–∑–≤–ª–µ–∫–∞–µ–º —Å—Ç–∞—Ä—ã–µ URL –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ S3
    const oldImageUrls = extractImageUrls(existingTrainer.photoUrl);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å –∏–º–µ–Ω–∏ (–∏—Å–∫–ª—é—á–∞—è —Ç–µ–∫—É—â–µ–≥–æ —Ç—Ä–µ–Ω–µ—Ä–∞)
    const duplicateTrainer = await prisma.trainer.findFirst({
      where: {
        name: { equals: name, mode: 'insensitive' },
        id: { not: id }
      }
    });

    if (duplicateTrainer) {
      return NextResponse.json(
        { error: '–¢—Ä–µ–Ω–µ—Ä —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç' },
        { status: 400 }
      );
    }

    // –í–∞–ª–∏–¥–∏—Ä—É–µ–º –∏ –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –º–∞—Å—Å–∏–≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    let processedPhotoUrls = null;
    if (photoUrls && Array.isArray(photoUrls) && photoUrls.length > 0) {
      // –§–∏–ª—å—Ç—Ä—É–µ–º –ø—É—Å—Ç—ã–µ URL –∏ –≤–∞–ª–∏–¥–∏—Ä—É–µ–º
      const validUrls = photoUrls.filter(url => url && typeof url === 'string' && url.trim().length > 0);
      if (validUrls.length > 0) {
        processedPhotoUrls = JSON.stringify(validUrls);
      }
    }

    const updatedTrainer = await prisma.trainer.update({
      where: { id },
      data: {
        name: name.trim(),
        description: description.trim(),
        price: parseFloat(price.toString()),
        photoUrl: processedPhotoUrls
      }
    });

    // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑ S3 (–µ—Å–ª–∏ –æ–Ω–∏ –æ—Ç–ª–∏—á–∞—é—Ç—Å—è –æ—Ç –Ω–æ–≤—ã—Ö)
    const newImageUrls = photoUrls && Array.isArray(photoUrls) ? photoUrls : [];
    const imagesToDelete = oldImageUrls.filter(oldUrl => !newImageUrls.includes(oldUrl));
    
    if (imagesToDelete.length > 0) {
      deleteMultipleFromS3(imagesToDelete).catch(error => {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ä—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏–∑ S3:', error);
      });
    }

    console.log(`üìù –¢—Ä–µ–Ω–µ—Ä "${name}" –æ–±–Ω–æ–≤–ª–µ–Ω (ID: ${id})`);

    return NextResponse.json(updatedTrainer);

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ç—Ä–µ–Ω–µ—Ä–∞:', error);
    return NextResponse.json(
      { error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ç—Ä–µ–Ω–µ—Ä–∞' },
      { status: 500 }
    );
  }
}

// DELETE /api/trainers/[id]
export async function DELETE(
  request: NextRequest,
  { params }: { params: { id: string } }
) {
  try {
    const id = parseInt(params.id);

    if (isNaN(id)) {
      return NextResponse.json(
        { error: '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID —Ç—Ä–µ–Ω–µ—Ä–∞' },
        { status: 400 }
      );
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ç—Ä–µ–Ω–µ—Ä–∞
    const existingTrainer = await prisma.trainer.findUnique({
      where: { id }
    });

    if (!existingTrainer) {
      return NextResponse.json(
        { error: '–¢—Ä–µ–Ω–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω' },
        { status: 404 }
      );
    }

    // –ò–∑–≤–ª–µ–∫–∞–µ–º URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ S3
    const imageUrls = extractImageUrls(existingTrainer.photoUrl);
    
    // –£–¥–∞–ª—è–µ–º —Ç—Ä–µ–Ω–µ—Ä–∞ –∏–∑ –ë–î
    await prisma.trainer.delete({
      where: { id }
    });

    // –£–¥–∞–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑ S3 (–∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ, –Ω–µ –±–ª–æ–∫–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç)
    if (imageUrls.length > 0) {
      deleteMultipleFromS3(imageUrls).catch(error => {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏–∑ S3:', error);
      });
    }

    console.log(`üóëÔ∏è –¢—Ä–µ–Ω–µ—Ä "${existingTrainer.name}" —É–¥–∞–ª–µ–Ω (ID: ${id})`);

    return NextResponse.json(
      { message: '–¢—Ä–µ–Ω–µ—Ä —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω' },
      { status: 200 }
    );

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ç—Ä–µ–Ω–µ—Ä–∞:', error);
    return NextResponse.json(
      { error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ç—Ä–µ–Ω–µ—Ä–∞' },
      { status: 500 }
    );
  }
}
