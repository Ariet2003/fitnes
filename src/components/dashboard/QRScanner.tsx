'use client';

import { useEffect, useRef, useState, useCallback } from 'react';
import { BrowserMultiFormatReader } from '@zxing/library';
import { Camera, X, Pause, Play } from 'lucide-react';
import QRVisitModal from './QRVisitModal';

interface QRScannerProps {
  isEnabled: boolean;
  onScanResult?: (result: string) => void;
}

interface ScanResult {
  success: boolean;
  error?: string;
  errorType?: string;
  client?: {
    id: number;
    fullName: string;
    phone: string;
    photoUrl?: string | null;
  };
  subscription?: {
    id: number;
    tariffName: string;
    endDate: string;
    remainingDays: number;
  };
  visitTime?: string;
  workingHours?: {
    start: string;
    end: string;
  };
}

export default function QRScanner({ isEnabled, onScanResult }: QRScannerProps) {
  const hiddenVideoRef = useRef<HTMLVideoElement>(null); // –°–∫—Ä—ã—Ç–æ–µ –≤–∏–¥–µ–æ –¥–ª—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
  const previewVideoRef = useRef<HTMLVideoElement>(null); // –í–∏–¥–∏–º–æ–µ –≤–∏–¥–µ–æ –¥–ª—è –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
  const codeReader = useRef<BrowserMultiFormatReader | null>(null);
  const [isScanning, setIsScanning] = useState(false);
  const [isPaused, setIsPaused] = useState(false);
  const [isMinimized, setIsMinimized] = useState(true);
  const [hasPermission, setHasPermission] = useState<boolean | null>(null);
  const [error, setError] = useState<string | null>(null);
  const [scanResult, setScanResult] = useState<ScanResult | null>(null);
  const [showVisitModal, setShowVisitModal] = useState(false);
  const [lastScanned, setLastScanned] = useState<string | null>(null);
  const [cooldown, setCooldown] = useState(false);
  const [isInitializing, setIsInitializing] = useState(false);
  const controlsRef = useRef<any>(null);

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∫–∞–Ω–µ—Ä–∞
  useEffect(() => {
    codeReader.current = new BrowserMultiFormatReader();
    return () => {
      stopScanning();
    };
  }, []);

  // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç isEnabled
  useEffect(() => {
    if (isEnabled && codeReader.current && !isScanning) {
      // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
      if ('Notification' in window && Notification.permission === 'default') {
        Notification.requestPermission().then(permission => {
          console.log('–†–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:', permission);
        });
      }
      
      // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ DOM
      const timer = setTimeout(() => {
        if (hiddenVideoRef.current) {
          console.log('üöÄ –ó–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤–æ–≥–æ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è...');
          startScanning();
        }
      }, 100);
      return () => clearTimeout(timer);
    } else if (!isEnabled && isScanning) {
      stopScanning();
    }
  }, [isEnabled, isScanning]);

  // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –≤–∏–¥–µ–æ–ø–æ—Ç–æ–∫–∞ –ø—Ä–∏ —Ä–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–Ω–∏–∏
  useEffect(() => {
    if (!isMinimized && isScanning) {
      syncVideoStreams();
    }
  }, [isMinimized, isScanning]);

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–∏–≤–ª–µ—á–µ–Ω–∏—è –≤–Ω–∏–º–∞–Ω–∏—è –∫ –≤–∫–ª–∞–¥–∫–µ
  const focusTab = useCallback(() => {
    try {
      // 1. –§–æ–∫—É—Å–∏—Ä—É–µ–º –æ–∫–Ω–æ –±—Ä–∞—É–∑–µ—Ä–∞
      window.focus();
      
      // 2. –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –±—Ä–∞—É–∑–µ—Ä–∞ (–µ—Å–ª–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–æ)
      if ('Notification' in window && Notification.permission === 'granted') {
        new Notification('QR-–∫–æ–¥ –æ—Ç—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω!', {
          body: '–ö–ª–∏–µ–Ω—Ç –Ω–∞–π–¥–µ–Ω. –¢—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ—Å–µ—â–µ–Ω–∏—è.',
          icon: '/favicon.ico',
          tag: 'qr-scan',
          requireInteraction: true
        });
      }
      
      // 3. –ú–µ–Ω—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –≤–∫–ª–∞–¥–∫–∏ –¥–ª—è –ø—Ä–∏–≤–ª–µ—á–µ–Ω–∏—è –≤–Ω–∏–º–∞–Ω–∏—è
      const originalTitle = document.title;
      let blinkCount = 0;
      const blinkInterval = setInterval(() => {
        document.title = blinkCount % 2 === 0 ? 'üî¥ QR –°–ö–ê–ù–ò–†–û–í–ê–ù–ò–ï!' : originalTitle;
        blinkCount++;
        if (blinkCount >= 10) { // –ú–∏–≥–∞–µ–º 5 —Ä–∞–∑
          clearInterval(blinkInterval);
          document.title = originalTitle;
        }
      }, 500);
      
      // 4. –í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º –∑–≤—É–∫–æ–≤–æ–π —Å–∏–≥–Ω–∞–ª
      try {
        // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π –∑–≤—É–∫–æ–≤–æ–π —Å–∏–≥–Ω–∞–ª
        const playNotificationSound = () => {
          const audioContext = new (window.AudioContext || (window as any).webkitAudioContext)();
          
          // –ü–µ—Ä–≤—ã–π —Ç–æ–Ω
          const oscillator1 = audioContext.createOscillator();
          const gainNode1 = audioContext.createGain();
          oscillator1.connect(gainNode1);
          gainNode1.connect(audioContext.destination);
          oscillator1.frequency.value = 800;
          gainNode1.gain.setValueAtTime(0, audioContext.currentTime);
          gainNode1.gain.linearRampToValueAtTime(0.1, audioContext.currentTime + 0.01);
          gainNode1.gain.linearRampToValueAtTime(0, audioContext.currentTime + 0.2);
          oscillator1.start(audioContext.currentTime);
          oscillator1.stop(audioContext.currentTime + 0.2);
          
          // –í—Ç–æ—Ä–æ–π —Ç–æ–Ω (—á—É—Ç—å –ø–æ–∑–∂–µ)
          const oscillator2 = audioContext.createOscillator();
          const gainNode2 = audioContext.createGain();
          oscillator2.connect(gainNode2);
          gainNode2.connect(audioContext.destination);
          oscillator2.frequency.value = 1000;
          gainNode2.gain.setValueAtTime(0, audioContext.currentTime + 0.3);
          gainNode2.gain.linearRampToValueAtTime(0.1, audioContext.currentTime + 0.31);
          gainNode2.gain.linearRampToValueAtTime(0, audioContext.currentTime + 0.5);
          oscillator2.start(audioContext.currentTime + 0.3);
          oscillator2.stop(audioContext.currentTime + 0.5);
        };
        
        playNotificationSound();
      } catch (audioError) {
        console.warn('–ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ –∑–≤—É–∫:', audioError);
        // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥ - –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∑–≤—É–∫ –±—Ä–∞—É–∑–µ—Ä–∞
        try {
          const audio = new Audio('data:audio/wav;base64,UklGRnoGAABXQVZFZm10IBAAAAABAAEAQB8AAEAfAAABAAgAZGF0YQoGAACBhYqFbF1fdJivrJBhNjVgodDbq2EcBj+a2/LDciUFLIHO8tiJNwgZaLvt559NEAxQp+PwtmMcBjiR1/LMeSwFJHfH8N2QQAoUXrTp66hVFApGn+DyvmY');
          audio.volume = 0.1;
          audio.play().catch(() => {});
        } catch {
          // –ï—Å–ª–∏ –∏ —ç—Ç–æ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –ø—Ä–æ—Å—Ç–æ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º
        }
      }
      
    } catch (error) {
      console.warn('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –ø—Ä–∏–≤–ª–µ—á—å –≤–Ω–∏–º–∞–Ω–∏–µ:', error);
    }
  }, []);

  const validateAndProcessQR = useCallback(async (telegramId: string) => {
    try {
      // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –ø–æ–≤—Ç–æ—Ä–Ω–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–≥–æ –∂–µ QR-–∫–æ–¥–∞ –≤ —Ç–µ—á–µ–Ω–∏–µ 3 —Å–µ–∫—É–Ω–¥
      if (lastScanned === telegramId || cooldown) {
        return;
      }

      setLastScanned(telegramId);
      setCooldown(true);
      
      // –£–±–∏—Ä–∞–µ–º –∫—É–ª–¥–∞—É–Ω —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
      setTimeout(() => {
        setCooldown(false);
        setLastScanned(null);
      }, 3000);

      const response = await fetch('/api/visits', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ telegramId }),
      });

      const result = await response.json();
      setScanResult(result);
      setShowVisitModal(true);

      // –ü—Ä–∏–≤–ª–µ–∫–∞–µ–º –≤–Ω–∏–º–∞–Ω–∏–µ –∫ –≤–∫–ª–∞–¥–∫–µ
      focusTab();

      // –ü–∞—É–∑–∏–º —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞ –≤—Ä–µ–º—è –ø–æ–∫–∞–∑–∞ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
      pauseScanning();

      if (onScanResult) {
        onScanResult(telegramId);
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ QR-–∫–æ–¥–∞:', error);
      setScanResult({
        success: false,
        error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ QR-–∫–æ–¥–∞',
        errorType: 'PROCESSING_ERROR'
      });
      setShowVisitModal(true);
      
      // –ü—Ä–∏–≤–ª–µ–∫–∞–µ–º –≤–Ω–∏–º–∞–Ω–∏–µ –¥–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
      focusTab();
      
      pauseScanning();
    }
  }, [lastScanned, cooldown, onScanResult, focusTab]);

  const startScanning = async () => {
    console.log('üé• –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–∫–∞–Ω–µ—Ä–∞...', {
      isEnabled,
      isMinimized,
      isScanning,
      hasHiddenVideoRef: !!hiddenVideoRef.current,
      hasPreviewVideoRef: !!previewVideoRef.current,
      hasCodeReader: !!codeReader.current
    });
    
    if (!codeReader.current) {
      console.error('‚ùå CodeReader –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
      setError('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–∫–∞–Ω–µ—Ä–∞');
      return;
    }
    
    if (!hiddenVideoRef.current) {
      console.error('‚ùå –°–∫—Ä—ã—Ç—ã–π video —ç–ª–µ–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω');
      setError('–û—à–∏–±–∫–∞ –≤–∏–¥–µ–æ —ç–ª–µ–º–µ–Ω—Ç–∞');
      return;
    }

    try {
      setError(null);
      setIsInitializing(true);
      console.log('üì± –ó–∞–ø—Ä–æ—Å –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–∞–º–µ—Ä–µ...');
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É –º–µ–¥–∏–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤
      if (!navigator.mediaDevices || !navigator.mediaDevices.getUserMedia) {
        throw new Error('–í–∞—à –±—Ä–∞—É–∑–µ—Ä –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –¥–æ—Å—Ç—É–ø –∫ –∫–∞–º–µ—Ä–µ');
      }
      
      // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∞ –∫–∞–º–µ—Ä—É
      const stream = await navigator.mediaDevices.getUserMedia({ 
        video: { 
          facingMode: 'environment' // –ó–∞–¥–Ω—è—è –∫–∞–º–µ—Ä–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        } 
      });
      
      console.log('‚úÖ –î–æ—Å—Ç—É–ø –∫ –∫–∞–º–µ—Ä–µ –ø–æ–ª—É—á–µ–Ω');
      setHasPermission(true);
      
      // –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞ —Å–∫—Ä—ã—Ç–æ–º –≤–∏–¥–µ–æ —ç–ª–µ–º–µ–Ω—Ç–µ
      console.log('üîç –ó–∞–ø—É—Å–∫ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è...');
      controlsRef.current = await codeReader.current.decodeFromVideoDevice(
        null,
        hiddenVideoRef.current,
        (result, error) => {
          if (result) {
            const scannedText = result.getText();
            console.log('üìã QR Code –Ω–∞–π–¥–µ–Ω:', scannedText);
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –ø–æ—Ö–æ–∂–µ –Ω–∞ telegram ID (—á–∏—Å–ª–æ)
            if (/^\d+$/.test(scannedText)) {
              console.log('‚úÖ –í–∞–ª–∏–¥–Ω—ã–π telegram ID:', scannedText);
              validateAndProcessQR(scannedText);
            } else {
              console.log('‚ö†Ô∏è –ù–µ–ø–æ–¥—Ö–æ–¥—è—â–∏–π —Ñ–æ—Ä–º–∞—Ç QR-–∫–æ–¥–∞:', scannedText);
            }
          }
          
          if (error && error.name !== 'NotFoundException') {
            console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:', error);
          }
        }
      );
      
      console.log('‚úÖ –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ');
      setIsScanning(true);
      setIsPaused(false);
      setIsInitializing(false);
    } catch (error: any) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–∫–∞–Ω–µ—Ä–∞:', error);
      setHasPermission(false);
      
      // –ë–æ–ª–µ–µ –¥–µ—Ç–∞–ª—å–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–∞—Ö
      if (error?.name === 'NotAllowedError') {
        setError('–î–æ—Å—Ç—É–ø –∫ –∫–∞–º–µ—Ä–µ –∑–∞–ø—Ä–µ—â–µ–Ω. –†–∞–∑—Ä–µ—à–∏—Ç–µ –¥–æ—Å—Ç—É–ø –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –±—Ä–∞—É–∑–µ—Ä–∞');
      } else if (error?.name === 'NotFoundError') {
        setError('–ö–∞–º–µ—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫–∞–º–µ—Ä—ã');
      } else if (error?.name === 'NotSupportedError') {
        setError('–ö–∞–º–µ—Ä–∞ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –≤–∞—à–∏–º –±—Ä–∞—É–∑–µ—Ä–æ–º');
      } else if (error?.message) {
        setError(error.message);
      } else {
        setError('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –∫–∞–º–µ—Ä–µ');
      }
      setIsInitializing(false);
    }
  };

  const stopScanning = () => {
    console.log('üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è...');
    if (controlsRef.current) {
      controlsRef.current.stop();
      controlsRef.current = null;
    }
    setIsScanning(false);
    setIsPaused(false);
    setIsInitializing(false);
  };

  const pauseScanning = () => {
    console.log('‚è∏Ô∏è –ü–∞—É–∑–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è...');
    if (hiddenVideoRef.current) {
      hiddenVideoRef.current.pause();
    }
    if (previewVideoRef.current) {
      previewVideoRef.current.pause();
    }
    setIsPaused(true);
  };

  const resumeScanning = () => {
    console.log('‚ñ∂Ô∏è –í–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è...');
    if (hiddenVideoRef.current) {
      hiddenVideoRef.current.play();
    }
    if (previewVideoRef.current) {
      previewVideoRef.current.play();
    }
    setIsPaused(false);
  };

  // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –≤–∏–¥–µ–æ–ø–æ—Ç–æ–∫–∞ –º–µ–∂–¥—É —Å–∫—Ä—ã—Ç—ã–º –∏ –≤–∏–¥–∏–º—ã–º –≤–∏–¥–µ–æ
  const syncVideoStreams = () => {
    if (hiddenVideoRef.current && previewVideoRef.current && hiddenVideoRef.current.srcObject) {
      previewVideoRef.current.srcObject = hiddenVideoRef.current.srcObject;
      previewVideoRef.current.play().catch(console.warn);
    }
  };

  const togglePause = () => {
    if (isPaused) {
      resumeScanning();
    } else {
      pauseScanning();
    }
  };

  const handleMarkVisit = async () => {
    if (!scanResult?.client) return;

    try {
      const response = await fetch('/api/visits', {
        method: 'PUT',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ telegramId: lastScanned }),
      });

      const result = await response.json();
      
      if (result.success) {
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
        setScanResult({
          success: true,
          client: scanResult.client,
          subscription: scanResult.subscription
        });
        
        // –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã
        setTimeout(() => {
          setShowVisitModal(false);
          resumeScanning();
        }, 2000);
      } else {
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É
        setScanResult({
          ...scanResult,
          success: false,
          error: result.error || '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –ø–æ—Å–µ—â–µ–Ω–∏—è'
        });
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –ø–æ—Å–µ—â–µ–Ω–∏—è:', error);
      setScanResult({
        ...scanResult,
        success: false,
        error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –ø–æ—Å–µ—â–µ–Ω–∏—è'
      });
    }
  };

  const closeModal = () => {
    setShowVisitModal(false);
    setScanResult(null);
    resumeScanning();
  };

  // –ù–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–∫–∞–Ω–µ—Ä –µ—Å–ª–∏ –æ–Ω –æ—Ç–∫–ª—é—á–µ–Ω
  if (!isEnabled) {
    return null;
  }

  if (hasPermission === false) {
    return (
      <div className="fixed bottom-4 right-4 bg-red-600 text-white p-4 rounded-lg shadow-lg z-50">
        <div className="flex items-center space-x-2">
          <Camera className="w-5 h-5" />
          <span className="text-sm">–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–∞–º–µ—Ä–µ</span>
        </div>
      </div>
    );
  }

  return (
    <>
      {/* –ö–æ–º–ø–∞–∫—Ç–Ω—ã–π QR-—Å–∫–∞–Ω–µ—Ä */}
      <div className={`fixed bottom-4 right-4 z-40 transition-all duration-300 ${
        isMinimized ? 'w-16 h-16' : 'w-80 h-60'
      }`}>
        <div className="bg-gray-800 rounded-lg overflow-hidden shadow-lg">
          {isMinimized ? (
            /* –ú–∏–Ω–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ */
            <button
              onClick={() => {
                console.log('üì± –†–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–Ω–∏–µ QR-—Å–∫–∞–Ω–µ—Ä–∞...');
                setIsMinimized(false);
                // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –≤–∏–¥–µ–æ–ø–æ—Ç–æ–∫ –ø–æ—Å–ª–µ —Ä–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–Ω–∏—è
                setTimeout(syncVideoStreams, 100);
              }}
              className="w-16 h-16 flex items-center justify-center text-white hover:bg-gray-700 transition-colors"
              title="–†–∞–∑–≤–µ—Ä–Ω—É—Ç—å QR-—Å–∫–∞–Ω–µ—Ä"
            >
              <Camera className="w-6 h-6" />
              {isScanning && (
                <div className="absolute -top-1 -right-1 w-3 h-3 bg-green-500 rounded-full animate-pulse"></div>
              )}
            </button>
          ) : (
            /* –†–∞–∑–≤–µ—Ä–Ω—É—Ç–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ */
            <>
              {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
              <div className="bg-gray-900 px-3 py-2 flex items-center justify-between">
                <div className="flex items-center space-x-2">
                  <Camera className="w-4 h-4 text-white" />
                  <span className="text-white text-sm font-medium">QR –°–∫–∞–Ω–µ—Ä</span>
                  {isScanning && !isPaused && (
                    <div className="w-2 h-2 bg-green-500 rounded-full animate-pulse"></div>
                  )}
                </div>
                <div className="flex items-center space-x-1">
                  <button
                    onClick={togglePause}
                    className="p-1 text-gray-300 hover:text-white transition-colors"
                    title={isPaused ? '–í–æ–∑–æ–±–Ω–æ–≤–∏—Ç—å' : '–ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å'}
                  >
                    {isPaused ? <Play className="w-4 h-4" /> : <Pause className="w-4 h-4" />}
                  </button>
                  <button
                    onClick={() => {
                      console.log('üì¶ –°–≤–æ—Ä–∞—á–∏–≤–∞–Ω–∏–µ QR-—Å–∫–∞–Ω–µ—Ä–∞ (—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç—Å—è –≤ —Ñ–æ–Ω–µ)...');
                      setIsMinimized(true);
                      // –ù–ï –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ - –æ–Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç—Å—è –≤ —Ñ–æ–Ω–µ
                    }}
                    className="p-1 text-gray-300 hover:text-white transition-colors"
                    title="–°–≤–µ—Ä–Ω—É—Ç—å (—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—Å—è –≤ —Ñ–æ–Ω–µ)"
                  >
                    <X className="w-4 h-4" />
                  </button>
                </div>
              </div>

              {/* –í–∏–¥–µ–æ */}
              <div className="relative">
                <video
                  ref={previewVideoRef}
                  className="w-full h-48 object-cover"
                  style={{ transform: 'scaleX(1)' }}
                  autoPlay
                  muted
                  playsInline
                />
                
                {/* Overlay –¥–ª—è —Ä–∞–º–∫–∏ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è */}
                <div className="absolute inset-0 flex items-center justify-center">
                  <div className="w-32 h-32 border-2 border-green-500 border-dashed rounded-lg">
                    {/* –£–≥–ª–æ–≤—ã–µ –º–∞—Ä–∫–µ—Ä—ã –¥–ª—è –ª—É—á—à–µ–π –≤–∏–¥–∏–º–æ—Å—Ç–∏ */}
                    <div className="relative w-full h-full">
                      {/* –í–µ—Ä—Ö–Ω–∏–π –ª–µ–≤—ã–π —É–≥–æ–ª */}
                      <div className="absolute top-0 left-0 w-4 h-4 border-l-2 border-t-2 border-green-400"></div>
                      {/* –í–µ—Ä—Ö–Ω–∏–π –ø—Ä–∞–≤—ã–π —É–≥–æ–ª */}
                      <div className="absolute top-0 right-0 w-4 h-4 border-r-2 border-t-2 border-green-400"></div>
                      {/* –ù–∏–∂–Ω–∏–π –ª–µ–≤—ã–π —É–≥–æ–ª */}
                      <div className="absolute bottom-0 left-0 w-4 h-4 border-l-2 border-b-2 border-green-400"></div>
                      {/* –ù–∏–∂–Ω–∏–π –ø—Ä–∞–≤—ã–π —É–≥–æ–ª */}
                      <div className="absolute bottom-0 right-0 w-4 h-4 border-r-2 border-b-2 border-green-400"></div>
                    </div>
                  </div>
                </div>

                {/* –°—Ç–∞—Ç—É—Å */}
                <div className="absolute bottom-2 left-2 right-2">
                  <div className="bg-black bg-opacity-50 text-white text-xs px-2 py-1 rounded text-center">
                    {error ? (
                      <span className="text-red-400">{error}</span>
                    ) : isInitializing ? (
                      <span className="text-blue-400 flex items-center justify-center">
                        <div className="animate-spin rounded-full h-3 w-3 border-b border-blue-400 mr-1"></div>
                        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è...
                      </span>
                    ) : isPaused ? (
                      <span className="text-yellow-400">–ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ</span>
                    ) : isScanning ? (
                      <span className="text-green-400 flex items-center justify-center">
                        <div className="w-2 h-2 bg-green-500 rounded-full animate-pulse mr-1"></div>
                        –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ
                      </span>
                    ) : (
                      <span className="text-gray-400">–ì–æ—Ç–æ–≤ –∫ –∑–∞–ø—É—Å–∫—É</span>
                    )}
                  </div>
                </div>
              </div>
            </>
          )}
        </div>
      </div>

      {/* –°–∫—Ä—ã—Ç–æ–µ –≤–∏–¥–µ–æ –¥–ª—è —Ñ–æ–Ω–æ–≤–æ–≥–æ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è */}
      <video
        ref={hiddenVideoRef}
        style={{ 
          position: 'absolute',
          top: '-9999px',
          left: '-9999px',
          width: '1px',
          height: '1px',
          opacity: 0,
          transform: 'scaleX(1)'
        }}
        autoPlay
        muted
        playsInline
      />

      {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–æ—Å–µ—â–µ–Ω–∏–∏ */}
      <QRVisitModal
        isOpen={showVisitModal}
        onClose={closeModal}
        scannedData={scanResult}
        onMarkVisit={handleMarkVisit}
      />
    </>
  );
}
