import bcrypt from 'bcryptjs';
import jwt from 'jsonwebtoken';
import { prisma } from './prisma';

export interface AdminCredentials {
  login: string;
  password: string;
}

export async function getAdminCredentials(): Promise<AdminCredentials | null> {
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    await prisma.$connect();
    
    const setting = await prisma.setting.findUnique({
      where: { key: 'admin' }
    });

    if (!setting) {
      console.warn('–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–¥–º–∏–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö');
      return null;
    }

    try {
      const credentials = JSON.parse(setting.value) as AdminCredentials;
      return credentials;
    } catch (parseError) {
      console.error('–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–∞–Ω–Ω—ã—Ö –∞–¥–º–∏–Ω–∞:', parseError);
      return null;
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∞–¥–º–∏–Ω–∞:', error);
    if (error instanceof Error) {
      console.error('–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:', error.message);
      console.error('–°—Ç–µ–∫ –æ—à–∏–±–∫–∏:', error.stack);
    }
    return null;
  } finally {
    // –û—Ç–∫–ª—é—á–∞–µ–º—Å—è –æ—Ç –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    await prisma.$disconnect();
  }
}

export async function getAdminTelegramId(): Promise<string | null> {
  try {
    await prisma.$connect();
    
    const setting = await prisma.setting.findUnique({
      where: { key: 'admin_telegram' }
    });

    if (!setting) {
      console.warn('Telegram ID –∞–¥–º–∏–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö');
      return null;
    }

    return setting.value;
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è Telegram ID:', error);
    if (error instanceof Error) {
      console.error('–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:', error.message);
      console.error('–°—Ç–µ–∫ –æ—à–∏–±–∫–∏:', error.stack);
    }
    return null;
  } finally {
    await prisma.$disconnect();
  }
}

const JWT_SECRET = process.env.JWT_SECRET || 'your-secret-key-for-jwt-fitness-app-2024';

export interface VerificationData {
  code: string;
  expiresAt: number;
  lastSentAt?: number;
}

export interface SessionData {
  userId: string;
  login: string;
  createdAt: number;
}

export async function verifyPassword(plainPassword: string, hashedPassword: string): Promise<boolean> {
  return bcrypt.compare(plainPassword, hashedPassword);
}

export function generateCode(): string {
  return Math.floor(100000 + Math.random() * 900000).toString();
}

export function createVerificationToken(code: string): string {
  const payload: VerificationData = {
    code,
    expiresAt: Date.now() + 5 * 60 * 1000, // 5 –º–∏–Ω—É—Ç
    lastSentAt: Date.now()
  };
  
  return jwt.sign(payload, JWT_SECRET, { expiresIn: '5m' });
}

export function verifyVerificationToken(token: string): VerificationData | null {
  try {
    const decoded = jwt.verify(token, JWT_SECRET) as VerificationData;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∏—Å—Ç–µ–∫ –ª–∏ —Ç–æ–∫–µ–Ω
    if (Date.now() > decoded.expiresAt) {
      return null;
    }
    
    return decoded;
  } catch (error) {
    return null;
  }
}

export function createSessionToken(login: string): string {
  console.log('[AUTH] –°–æ–∑–¥–∞–µ–º —Ç–æ–∫–µ–Ω —Å–µ—Å—Å–∏–∏ –¥–ª—è:', login);
  console.log('[AUTH] JWT_SECRET (–ø–µ—Ä–≤—ã–µ 10 —Å–∏–º–≤–æ–ª–æ–≤):', JWT_SECRET.substring(0, 10));
  
  const payload: SessionData = {
    userId: 'admin',
    login,
    createdAt: Date.now()
  };
  
  const token = jwt.sign(payload, JWT_SECRET, { expiresIn: '24h' });
  console.log('[AUTH] –¢–æ–∫–µ–Ω —Å–æ–∑–¥–∞–Ω (–ø–µ—Ä–≤—ã–µ 20 —Å–∏–º–≤–æ–ª–æ–≤):', token.substring(0, 20));
  
  return token;
}

export function verifySessionToken(token: string): SessionData | null {
  try {
    console.log('[AUTH] –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω —Å–µ—Å—Å–∏–∏');
    const decoded = jwt.verify(token, JWT_SECRET) as SessionData;
    console.log('[AUTH] –¢–æ–∫–µ–Ω –≤–∞–ª–∏–¥–Ω—ã–π:', decoded);
    return decoded;
  } catch (error) {
    console.error('[AUTH] –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–æ–∫–µ–Ω–∞:', error);
    return null;
  }
}

export function canResendCode(lastSentAt: number): boolean {
  const twoMinutes = 2 * 60 * 1000;
  return Date.now() - lastSentAt >= twoMinutes;
}

export async function getBotToken(): Promise<string | null> {
  try {
    const setting = await prisma.setting.findUnique({
      where: { key: 'admin_bot_token' }
    });

    return setting ? setting.value : null;
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞ –±–æ—Ç–∞:', error);
    return null;
  }
}

export async function sendTelegramCode(telegramId: string, code: string): Promise<boolean> {
  try {
    const botToken = await getBotToken();
    
    if (!botToken) {
      console.error('–¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö');
      return false;
    }

    const response = await fetch(`https://api.telegram.org/bot${botToken}/sendMessage`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        chat_id: telegramId,
        text: `üîê *–ö–æ–¥ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏*\n\n` +
              `–í–∞—à –∫–æ–¥ –¥–ª—è –≤—Ö–æ–¥–∞ –≤ —Å–∏—Å—Ç–µ–º—É —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ñ–∏—Ç–Ω–µ—Å-–∫–ª—É–±–æ–º:\n\n` +
              `\`${code}\`\n\n` +
              `‚è± –ö–æ–¥ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –≤ —Ç–µ—á–µ–Ω–∏–µ 5 –º–∏–Ω—É—Ç\n` +
              `üîí –ù–∏–∫–æ–º—É –Ω–µ —Å–æ–æ–±—â–∞–π—Ç–µ —ç—Ç–æ—Ç –∫–æ–¥\n\n` +
              `_–ï—Å–ª–∏ –≤—ã –Ω–µ –ø—ã—Ç–∞–ª–∏—Å—å –≤–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É, –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä—É–π—Ç–µ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ_`,
        parse_mode: 'Markdown'
      }),
    });

    return response.ok;
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram:', error);
    return false;
  }
}
