import { S3Client, PutObjectCommand, DeleteObjectCommand } from '@aws-sdk/client-s3';

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è S3 –∫–ª–∏–µ–Ω—Ç–∞
const s3Client = new S3Client({
  endpoint: process.env.S3_URL,
  region: 'auto', // –î–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º—ã—Ö —Å S3 —Ö—Ä–∞–Ω–∏–ª–∏—â
  credentials: {
    accessKeyId: process.env.PICTURES_TRIAL_TEST_BUCKET_S3_ACCESS_KEY!,
    secretAccessKey: process.env.PICTURES_TRIAL_TEST_BUCKET_S3_SECRET_ACCESS_KEY!,
  },
  forcePathStyle: true, // –î–ª—è –∫–∞—Å—Ç–æ–º–Ω—ã—Ö S3-—Å–æ–≤–º–µ—Å—Ç–∏–º—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
});

const BUCKET_NAME = process.env.PICTURES_TRIAL_TEST_BUCKET!;

/**
 * –ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ñ–∞–π–ª –≤ S3
 * @param file - –ë—É—Ñ–µ—Ä —Ñ–∞–π–ª–∞
 * @param fileName - –ò–º—è —Ñ–∞–π–ª–∞
 * @param contentType - MIME —Ç–∏–ø —Ñ–∞–π–ª–∞
 * @returns URL –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
 */
export async function uploadToS3(
  file: Buffer, 
  fileName: string, 
  contentType: string,
  folder: string = 'clients'
): Promise<string> {
  const key = `${folder}/${Date.now()}-${fileName}`;
  
  const command = new PutObjectCommand({
    Bucket: BUCKET_NAME,
    Key: key,
    Body: file,
    ContentType: contentType,
    ACL: 'public-read', // –î–µ–ª–∞–µ–º —Ñ–∞–π–ª –ø—É–±–ª–∏—á–Ω–æ –¥–æ—Å—Ç—É–ø–Ω—ã–º
  });

  await s3Client.send(command);
  
  // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É–±–ª–∏—á–Ω—ã–π URL
  return `${process.env.S3_URL}/${BUCKET_NAME}/${key}`;
}

/**
 * –£–¥–∞–ª—è–µ—Ç —Ñ–∞–π–ª –∏–∑ S3
 * @param fileUrl - URL —Ñ–∞–π–ª–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
 */
export async function deleteFromS3(fileUrl: string): Promise<void> {
  try {
    // –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–ª—é—á –∏–∑ URL
    const url = new URL(fileUrl);
    const key = url.pathname.substring(url.pathname.indexOf('/', 1) + 1);
    
    const command = new DeleteObjectCommand({
      Bucket: BUCKET_NAME,
      Key: key,
    });

    await s3Client.send(command);
    console.log(`üóëÔ∏è –£–¥–∞–ª–µ–Ω —Ñ–∞–π–ª –∏–∑ S3: ${key}`);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ –∏–∑ S3:', error);
    throw error;
  }
}

/**
 * –£–¥–∞–ª—è–µ—Ç –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –∏–∑ S3
 * @param fileUrls - –ú–∞—Å—Å–∏–≤ URL —Ñ–∞–π–ª–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
 */
export async function deleteMultipleFromS3(fileUrls: string[]): Promise<void> {
  if (!fileUrls || fileUrls.length === 0) return;
  
  console.log(`üóëÔ∏è –£–¥–∞–ª—è–µ–º ${fileUrls.length} —Ñ–∞–π–ª–æ–≤ –∏–∑ S3`);
  
  for (const fileUrl of fileUrls) {
    try {
      await deleteFromS3(fileUrl);
    } catch (error) {
      console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ ${fileUrl}:`, error);
      // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —É–¥–∞–ª–µ–Ω–∏–µ –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –¥–∞–∂–µ –µ—Å–ª–∏ –æ–¥–∏–Ω –Ω–µ —É–¥–∞–ª–∏–ª—Å—è
    }
  }
}

/**
 * –ò–∑–≤–ª–µ–∫–∞–µ—Ç URLs –∏–∑ JSON —Å—Ç—Ä–æ–∫–∏ photoUrl
 * @param photoUrl - JSON —Å—Ç—Ä–æ–∫–∞ —Å URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏–ª–∏ –æ–¥–∏–Ω–æ—á–Ω—ã–π URL
 * @returns –ú–∞—Å—Å–∏–≤ URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
 */
export function extractImageUrls(photoUrl: string | null): string[] {
  if (!photoUrl) return [];
  
  try {
    // –ü—ã—Ç–∞–µ–º—Å—è —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –∫–∞–∫ JSON
    const urls = JSON.parse(photoUrl);
    return Array.isArray(urls) ? urls : [photoUrl];
  } catch (e) {
    // –ï—Å–ª–∏ –Ω–µ JSON, –∑–Ω–∞—á–∏—Ç —ç—Ç–æ –æ–¥–∏–Ω–æ—á–Ω—ã–π URL
    return [photoUrl];
  }
}

/**
 * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
 * @param originalName - –ò—Å—Ö–æ–¥–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
 * @returns –£–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
 */
export function generateFileName(originalName: string): string {
  const extension = originalName.split('.').pop() || '';
  const timestamp = Date.now();
  const randomString = Math.random().toString(36).substring(2, 15);
  return `${timestamp}-${randomString}.${extension}`;
}
