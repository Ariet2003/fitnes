import QRCode from 'qrcode';
import { uploadToS3, deleteFromS3 } from './s3';
import { prisma } from './prisma';

/**
 * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç QR-–∫–æ–¥ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∑–∞–≥—Ä—É–∂–∞–µ—Ç –µ–≥–æ –≤ S3
 * @param telegramId - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Telegram
 * @param clientId - ID –∫–ª–∏–µ–Ω—Ç–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
 * @returns URL QR-–∫–æ–¥–∞ –≤ S3
 */
export async function generateAndUploadQRCode(telegramId: string, clientId: number): Promise<string> {
  try {
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º QR-–∫–æ–¥ –≤ –≤–∏–¥–µ –±—É—Ñ–µ—Ä–∞
    const qrBuffer = await QRCode.toBuffer(telegramId, {
      type: 'png',
      width: 512,
      margin: 2,
      color: {
        dark: '#000000',
        light: '#FFFFFF'
      }
    });

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
    const fileName = `qr-${clientId}-${Date.now()}.png`;

    // –ó–∞–≥—Ä—É–∂–∞–µ–º QR-–∫–æ–¥ –≤ S3
    const qrUrl = await uploadToS3(qrBuffer, fileName, 'image/png', 'qr-codes');

    console.log(`‚úÖ QR-–∫–æ–¥ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${telegramId} –∑–∞–≥—Ä—É–∂–µ–Ω: ${qrUrl}`);
    
    return qrUrl;
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ QR-–∫–æ–¥–∞:', error);
    throw new Error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ QR-–∫–æ–¥–∞');
  }
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç –∏–ª–∏ —Å–æ–∑–¥–∞–µ—Ç QR-–∫–æ–¥ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞
 * @param clientId - ID –∫–ª–∏–µ–Ω—Ç–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
 * @returns URL QR-–∫–æ–¥–∞ –≤ S3
 */
export async function getOrCreateQRCode(clientId: number): Promise<string> {
  try {
    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–∞
    const client = await prisma.client.findUnique({
      where: { id: clientId }
    });

    if (!client) {
      throw new Error('–ö–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }

    if (!client.telegramId) {
      throw new Error('–£ –∫–ª–∏–µ–Ω—Ç–∞ –Ω–µ —É–∫–∞–∑–∞–Ω Telegram ID');
    }

    // –ï—Å–ª–∏ QR-–∫–æ–¥ —É–∂–µ –µ—Å—Ç—å –∏ —ç—Ç–æ –Ω–µ –¥–µ—Ñ–æ–ª—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –µ–≥–æ
    if (client.qrCode && client.qrCode !== 'qr') {
      return client.qrCode;
    }

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π QR-–∫–æ–¥
    const qrUrl = await generateAndUploadQRCode(client.telegramId, clientId);

    // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    await prisma.client.update({
      where: { id: clientId },
      data: { qrCode: qrUrl }
    });

    return qrUrl;
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ QR-–∫–æ–¥–∞:', error);
    throw error;
  }
}

/**
 * –£–¥–∞–ª—è–µ—Ç QR-–∫–æ–¥ –∫–ª–∏–µ–Ω—Ç–∞ –∏–∑ S3 –∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
 * @param clientId - ID –∫–ª–∏–µ–Ω—Ç–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
 */
export async function deleteQRCode(clientId: number): Promise<void> {
  try {
    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–∞
    const client = await prisma.client.findUnique({
      where: { id: clientId }
    });

    if (!client || !client.qrCode || client.qrCode === 'qr') {
      return; // –ù–µ—Ç QR-–∫–æ–¥–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
    }

    // –£–¥–∞–ª—è–µ–º QR-–∫–æ–¥ –∏–∑ S3
    await deleteFromS3(client.qrCode);

    // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    await prisma.client.update({
      where: { id: clientId },
      data: { qrCode: 'qr' }
    });

    console.log(`üóëÔ∏è QR-–∫–æ–¥ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ ${clientId} —É–¥–∞–ª–µ–Ω`);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ QR-–∫–æ–¥–∞:', error);
    throw error;
  }
}

/**
 * –†–µ–≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç QR-–∫–æ–¥ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ (–ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ telegramId)
 * @param clientId - ID –∫–ª–∏–µ–Ω—Ç–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
 * @param newTelegramId - –ù–æ–≤—ã–π Telegram ID
 * @returns URL –Ω–æ–≤–æ–≥–æ QR-–∫–æ–¥–∞ –≤ S3
 */
export async function regenerateQRCode(clientId: number, newTelegramId: string): Promise<string> {
  try {
    // –°–Ω–∞—á–∞–ª–∞ —É–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π QR-–∫–æ–¥
    await deleteQRCode(clientId);

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π QR-–∫–æ–¥
    const qrUrl = await generateAndUploadQRCode(newTelegramId, clientId);

    // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    await prisma.client.update({
      where: { id: clientId },
      data: { 
        qrCode: qrUrl,
        telegramId: newTelegramId
      }
    });

    console.log(`üîÑ QR-–∫–æ–¥ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ ${clientId} —Ä–µ–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω`);
    
    return qrUrl;
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ QR-–∫–æ–¥–∞:', error);
    throw error;
  }
}
