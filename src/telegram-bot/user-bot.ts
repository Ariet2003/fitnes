import TelegramBot, { Message, CallbackQuery } from 'node-telegram-bot-api';
import { prisma } from '../lib/prisma';
import { getOrCreateQRCode } from '../lib/qr';

class UserTelegramBot {
  private bot: TelegramBot | null = null;
  private botToken: string | null = null;
  private isRunning = false;
  private lastMessages: Map<number, number[]> = new Map(); // chatId -> messageIds[]
  private lastBotMessage: Map<number, { messageId: number, hasPhoto: boolean }> = new Map(); // chatId -> lastBotMessage info
  private contactsPage: Map<number, number> = new Map(); // chatId -> currentContactIndex
  private productsPage: Map<number, number> = new Map(); // chatId -> currentProductIndex
  private productPhotoPage: Map<number, number> = new Map(); // chatId -> currentPhotoIndex
  private trainersPage: Map<number, number> = new Map(); // chatId -> currentTrainerIndex
  private trainerPhotoPage: Map<number, number> = new Map(); // chatId -> currentPhotoIndex
  private feedbackMode: Map<number, boolean> = new Map(); // chatId -> isInFeedbackMode
  private subscriptionsPage: Map<number, number> = new Map(); // chatId -> currentSubscriptionIndex

  constructor() {
    this.init();
  }

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
  private async init() {
    try {
      const token = await this.getBotToken();
      this.bot = new TelegramBot(token, { polling: true });
      this.setupHandlers();
      this.isRunning = true;
      if (process.env.NODE_ENV !== 'production') {
        console.log('ü§ñ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π Telegram –±–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ');
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –±–æ—Ç–∞:', error);
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –±–æ—Ç–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
  private async getBotToken(): Promise<string> {
    if (this.botToken) {
      return this.botToken;
    }

    try {
      console.log('üîç –ü–æ–∏—Å–∫ —Ç–æ–∫–µ–Ω–∞ –±–æ—Ç–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...');
      
      const setting = await prisma.setting.findUnique({
        where: { key: 'admin_bot_token' }
      });

      if (!setting) {
        throw new Error('–ù–∞—Å—Ç—Ä–æ–π–∫–∞ admin_bot_token –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ —Ç–∞–±–ª–∏—Ü–µ Setting.');
      }

      if (!setting.value) {
        throw new Error('–ó–Ω–∞—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –±–æ—Ç–∞ –ø—É—Å—Ç–æ–µ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö.');
      }

      console.log('‚úÖ –¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö');
      this.botToken = setting.value;
      return this.botToken;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ Telegram –±–æ—Ç–∞ –∏–∑ –ë–î:', error);
      throw error;
    }
  }

  // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥
  private setupHandlers() {
    if (!this.bot) return;

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
    this.bot.onText(/\/start/, async (msg: Message) => {
      const chatId = msg.chat.id;
      const telegramId = msg.from?.id?.toString();
      const firstName = msg.from?.first_name || '';
      const lastName = msg.from?.last_name || '';
      const username = msg.from?.username || '';

      if (process.env.NODE_ENV !== 'production') {
        console.log(`üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${firstName} ${lastName} (@${username}) –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞. Telegram ID: ${telegramId}`);
      }

      if (!telegramId) {
        await this.sendMessage(chatId, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤–∞—à–µ–≥–æ Telegram ID. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
        return;
      }

      try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        const existingClient = await prisma.client.findUnique({
          where: { telegramId: telegramId },
          include: {
            subscriptions: {
              where: { status: 'active' },
              include: { tariff: true }
            }
          }
        });

        if (existingClient) {
          // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
          // –ù–ï —É–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –≤—Ö–æ–¥–µ (–∫–æ–º–∞–Ω–¥–∞ /start)
          await this.sendWelcomeMenu(chatId, existingClient.fullName);
        } else {
          // –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ —Å –µ–≥–æ ID
          await this.sendNewUserMessage(chatId, telegramId, firstName, lastName);
        }
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã /start:', error);
        await this.sendMessage(chatId, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.');
      }
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é
    this.bot.on('callback_query', async (query: CallbackQuery) => {
      const chatId = query.message?.chat.id;
      const data = query.data;
      const telegramId = query.from.id.toString();

      if (!chatId || !data) return;

      try {
        await this.bot!.answerCallbackQuery(query.id);

        // –î–ª—è –∫–Ω–æ–ø–æ–∫ –ø—ã—Ç–∞–µ–º—Å—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–º–µ—Å—Ç–æ —É–¥–∞–ª–µ–Ω–∏—è
        switch (data) {
          case 'subscription':
            await this.handleSubscriptionInfo(chatId, telegramId);
            break;
          case 'subscription_history':
            await this.handleSubscriptionHistory(chatId, telegramId);
            break;
          case 'available_subscriptions':
            await this.handleAvailableSubscriptions(chatId);
            break;
          case 'subscriptions_prev':
            await this.handleSubscriptionsPrev(chatId);
            break;
          case 'subscriptions_next':
            await this.handleSubscriptionsNext(chatId);
            break;
          case 'qr_code':
            await this.handleQRCode(chatId, telegramId);
            break;
          case 'freeze_day':
            await this.handleFreezeDay(chatId, telegramId);
            break;
          case 'unfreeze_day':
            await this.handleUnfreezeDay(chatId, telegramId);
            break;
          case 'feedback':
            await this.handleFeedback(chatId, telegramId);
            break;
          case 'feedback_refresh':
            await this.handleFeedbackRefresh(chatId, telegramId);
            break;
          case 'contacts':
            await this.handleContacts(chatId);
            break;
          case 'contacts_prev':
            await this.handleContactsPrev(chatId);
            break;
          case 'contacts_next':
            await this.handleContactsNext(chatId);
            break;
          case 'products':
            await this.handleProducts(chatId);
            break;
          case 'products_prev':
            await this.handleProductsPrev(chatId);
            break;
          case 'products_next':
            await this.handleProductsNext(chatId);
            break;
          case 'product_photo_prev':
            await this.handleProductPhotoPrev(chatId);
            break;
          case 'product_photo_next':
            await this.handleProductPhotoNext(chatId);
            break;
          case 'trainers':
            await this.handleTrainers(chatId);
            break;
          case 'trainers_prev':
            await this.handleTrainersPrev(chatId);
            break;
          case 'trainers_next':
            await this.handleTrainersNext(chatId);
            break;
          case 'trainer_photo_prev':
            await this.handleTrainerPhotoPrev(chatId);
            break;
          case 'trainer_photo_next':
            await this.handleTrainerPhotoNext(chatId);
            break;
          case 'back_to_menu':
            const client = await prisma.client.findUnique({
              where: { telegramId: telegramId }
            });
            if (client) {
              // –î–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –ø—ã—Ç–∞–µ–º—Å—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
              await this.handleBackToMenu(chatId, client.fullName);
            }
            break;
        }
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ callback query:', error);
        await this.sendMessage(chatId, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
      }
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ª—é–±—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–∫—Ä–æ–º–µ –∫–æ–º–∞–Ω–¥)
    this.bot.on('message', async (msg: Message) => {
      // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã
      if (msg.text?.startsWith('/')) return;
      
      const chatId = msg.chat.id;
      const telegramId = msg.from?.id.toString();
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Ä–µ–∂–∏–º–µ –æ—Ç–∑—ã–≤–∞
      if (this.feedbackMode.get(chatId)) {
        // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∏—Å—Ç–æ—Ä–∏—é –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
        this.addMessageToHistory(chatId, msg.message_id);
        await this.handleFeedbackMessage(chatId, telegramId!, msg.text!);
        return;
      }
      
      // –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–∏ –ª—é–±–æ–º –Ω–æ–≤–æ–º —Ç–µ–∫—Å—Ç–µ (–µ—Å–ª–∏ –Ω–µ –≤ —Ä–µ–∂–∏–º–µ –æ—Ç–∑—ã–≤–∞)
      await this.deletePreviousMessages(chatId);
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ polling
    this.bot.on('polling_error', (error: Error) => {
      console.error('–û—à–∏–±–∫–∞ polling –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –±–æ—Ç–∞:', error);
    });
  }

  // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–æ–≤–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
  private async sendNewUserMessage(chatId: number, telegramId: string, firstName: string, lastName: string) {
    const name = `${firstName} ${lastName}`.trim() || '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å';
    
    const message = `üëã –ü—Ä–∏–≤–µ—Ç, ${name}!

–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à —Ñ–∏—Ç–Ω–µ—Å-–∫–ª—É–±! 

üÜî –í–∞—à Telegram ID: \`${telegramId}\`

–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º —Ñ—É–Ω–∫—Ü–∏—è–º –±–æ—Ç–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –∫–ª—É–±–∞ –∏ —Å–æ–æ–±—â–∏—Ç–µ –µ–º—É —ç—Ç–æ—Ç ID. –ü–æ—Å–ª–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤ —Å–∏—Å—Ç–µ–º–µ –≤—ã —Å–º–æ–∂–µ—Ç–µ:

‚Ä¢ –ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–≤–æ–µ–º –∞–±–æ–Ω–µ–º–µ–Ω—Ç–µ
‚Ä¢ –ü–æ–ª—É—á–∞—Ç—å QR-–∫–æ–¥ –¥–ª—è –ø–æ—Å–µ—â–µ–Ω–∏—è
‚Ä¢ –û—Å—Ç–∞–≤–ª—è—Ç—å –æ—Ç–∑—ã–≤—ã –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
‚Ä¢ –ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç—ã –∫–ª—É–±–∞
‚Ä¢ –£–∑–Ω–∞–≤–∞—Ç—å –æ –Ω–∞—à–∏—Ö –ø—Ä–æ–¥—É–∫—Ç–∞—Ö

–£–≤–∏–¥–∏–º—Å—è –≤ –∑–∞–ª–µ! üí™`;

    await this.sendMessage(chatId, message, { parse_mode: 'Markdown' });
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
  private async handleBackToMenu(chatId: number, fullName: string) {
    // –û—Ç–∫–ª—é—á–∞–µ–º —Ä–µ–∂–∏–º –≤–≤–æ–¥–∞ –æ—Ç–∑—ã–≤–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –≤ –º–µ–Ω—é
    this.feedbackMode.delete(chatId);
    
    const message = `üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, ${fullName}!

–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª:`;

    const keyboard = {
      inline_keyboard: [
        [
          { text: 'üìù –ê–±–æ–Ω–µ–º–µ–Ω—Ç', callback_data: 'subscription' },
          { text: 'üì± QR-–∫–æ–¥', callback_data: 'qr_code' }
        ],
        [
          { text: 'üí¨ –û—Ç–∑—ã–≤—ã', callback_data: 'feedback' },
          { text: 'üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã', callback_data: 'contacts' }
        ],
        [
          { text: 'üõçÔ∏è –ü—Ä–æ–¥—É–∫—Ç—ã', callback_data: 'products' },
          { text: 'üí™ –¢—Ä–µ–Ω–µ—Ä—ã', callback_data: 'trainers' }
        ]
      ]
    };

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–∞—è –∫–∞—Ä—Ç–∏–Ω–∫–∞
    const imageUrl = await this.getWelcomeImageUrl();
    const lastMessage = this.lastBotMessage.get(chatId);
    
    if (imageUrl) {
      // –ï—Å–ª–∏ –µ—Å—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫–∞, –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Å —Ñ–æ—Ç–æ
      if (lastMessage?.hasPhoto) {
        // –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –º–µ–¥–∏–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ (–º–µ–Ω—è–µ–º —Ñ–æ—Ç–æ –Ω–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ + –ø–æ–¥–ø–∏—Å—å + –∫–Ω–æ–ø–∫–∏)
        const edited = await this.editLastMediaMessage(chatId, imageUrl, message, keyboard);
        if (!edited) {
          await this.deletePreviousMessages(chatId);
          await this.sendPhoto(chatId, imageUrl, message, keyboard);
        }
      } else {
        // –ü–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—ã–ª–æ —Ç–µ–∫—Å—Ç–æ–≤—ã–º, –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ
        await this.deletePreviousMessages(chatId);
        await this.sendPhoto(chatId, imageUrl, message, keyboard);
      }
    } else {
      // –ï—Å–ª–∏ –Ω–µ—Ç –∫–∞—Ä—Ç–∏–Ω–∫–∏, –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Ç–µ–∫—Å—Ç–æ–≤–æ–µ
      if (lastMessage?.hasPhoto) {
        // –ü—Ä–µ–¥—ã–¥—É—â–µ–µ –±—ã–ª–æ —Å —Ñ–æ—Ç–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ
        await this.deletePreviousMessages(chatId);
        await this.sendMessage(chatId, message, { reply_markup: keyboard });
      } else {
        // –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        const edited = await this.editLastMessage(chatId, message, keyboard);
        if (!edited) {
          await this.sendMessage(chatId, message, { reply_markup: keyboard });
        }
      }
    }
  }

  // –û—Ç–ø—Ä–∞–≤–∫–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é (—Ç–æ–ª—å–∫–æ –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ –≤—Ö–æ–¥–∞)
  private async sendWelcomeMenu(chatId: number, fullName: string) {
    const message = `üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, ${fullName}!

–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª:`;

    const keyboard = {
      inline_keyboard: [
        [
          { text: 'üìù –ê–±–æ–Ω–µ–º–µ–Ω—Ç', callback_data: 'subscription' },
          { text: 'üì± QR-–∫–æ–¥', callback_data: 'qr_code' }
        ],
        [
          { text: 'üí¨ –û—Ç–∑—ã–≤—ã', callback_data: 'feedback' },
          { text: 'üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã', callback_data: 'contacts' }
        ],
        [
          { text: 'üõçÔ∏è –ü—Ä–æ–¥—É–∫—Ç—ã', callback_data: 'products' },
          { text: 'üí™ –¢—Ä–µ–Ω–µ—Ä—ã', callback_data: 'trainers' }
        ]
      ]
    };

    // –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫—É —Å —Ç–µ–∫—Å—Ç–æ–º –∫–∞–∫ –ø–æ–¥–ø–∏—Å—å—é
    const imageUrl = await this.getWelcomeImageUrl();
    if (imageUrl) {
      await this.sendPhoto(chatId, imageUrl, message, keyboard);
    } else {
      // –ï—Å–ª–∏ –∫–∞—Ä—Ç–∏–Ω–∫–∏ –Ω–µ—Ç, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
      await this.sendMessage(chatId, message, { reply_markup: keyboard });
    }
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∞–±–æ–Ω–µ–º–µ–Ω—Ç–µ
  private async handleSubscriptionInfo(chatId: number, telegramId: string) {
    try {
      const client: any = await prisma.client.findUnique({
        where: { telegramId: telegramId },
        include: {
          subscriptions: {
            where: { status: 'active' },
            include: { 
              tariff: true,
              // @ts-ignore
              trainer: true,
              visits: {
                orderBy: { visitDate: 'desc' }
              }
            },
            orderBy: { createdAt: 'desc' }
          }
        }
      });

      if (!client || client.subscriptions.length === 0) {
        const message = '‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞–±–æ–Ω–µ–º–µ–Ω—Ç–æ–≤.';
        const keyboard = {
          inline_keyboard: [[{ text: 'üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é', callback_data: 'back_to_menu' }]]
        };

        await this.sendOrEditWithWelcomePhoto(chatId, message, keyboard);
        return;
      }

      const subscription = client.subscriptions[0];
      const tariff = subscription.tariff;

      const startDate = new Date(subscription.startDate).toLocaleDateString('ru-RU');
      const endDate = new Date(subscription.endDate).toLocaleDateString('ru-RU');
      const remainingDays = subscription.remainingDays;
      
      // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å–µ—â–µ–Ω–∏–π
      const totalVisits = subscription.visits.length;
      const remainingVisits = Math.max(0, tariff.durationDays - totalVisits);

      // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç—Ä–µ–Ω–µ—Ä–µ
      const trainerInfo = subscription.trainer 
        ? `üí™ **–¢—Ä–µ–Ω–µ—Ä:** ${subscription.trainer.name} (${subscription.trainer.price} ‚ÇΩ)`
        : 'üí™ **–¢—Ä–µ–Ω–µ—Ä:** –ë–µ–∑ —Ç—Ä–µ–Ω–µ—Ä–∞';

      const message = `üìù –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∞—à–µ–º –∞–±–æ–Ω–µ–º–µ–Ω—Ç–µ:

üè∑Ô∏è **–ù–∞–∑–≤–∞–Ω–∏–µ:** ${tariff.name}
üí∞ **–¶–µ–Ω–∞:** ${tariff.price} ‚ÇΩ
${trainerInfo}
üìÖ **–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è:** ${tariff.duration} –º–µ—Å. (–¥–æ ${endDate})
üî¢ **–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å–µ—â–µ–Ω–∏–π:** ${tariff.durationDays} –¥–Ω–µ–π
‚è∞ **–í—Ä–µ–º—è –¥–æ—Å—Ç—É–ø–∞:** ${tariff.startTime} - ${tariff.endTime}
üßä **–ó–∞–º–æ—Ä–æ–∑–∫–∏:** ${subscription.freezeUsed}/${tariff.freezeLimit} –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ

${remainingDays <= 7 ? '‚ö†Ô∏è –í–∞—à –∞–±–æ–Ω–µ–º–µ–Ω—Ç —Å–∫–æ—Ä–æ –∏—Å—Ç–µ–∫–∞–µ—Ç! –ù–µ –∑–∞–±—É–¥—å—Ç–µ –ø—Ä–æ–¥–ª–∏—Ç—å.' : ''}`;

      const keyboard = {
        inline_keyboard: [
          [{ text: 'üìú –ò—Å—Ç–æ—Ä–∏—è –∞–±–æ–Ω–µ–º–µ–Ω—Ç–æ–≤', callback_data: 'subscription_history' }],
          [{ text: 'üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∞–±–æ–Ω–µ–º–µ–Ω—Ç—ã', callback_data: 'available_subscriptions' }],
          [{ text: 'üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é', callback_data: 'back_to_menu' }]
        ]
      };

      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É/—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–º —Ñ–æ—Ç–æ
      await this.sendOrEditWithWelcomePhoto(chatId, message, keyboard);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∞–±–æ–Ω–µ–º–µ–Ω—Ç–µ:', error);
      const errorMessage = '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∞–±–æ–Ω–µ–º–µ–Ω—Ç–µ.';
      const keyboard = {
        inline_keyboard: [[{ text: 'üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é', callback_data: 'back_to_menu' }]]
      };
      await this.sendOrEditWithWelcomePhoto(chatId, errorMessage, keyboard);
    }
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ –∞–±–æ–Ω–µ–º–µ–Ω—Ç–æ–≤
  private async handleSubscriptionHistory(chatId: number, telegramId: string) {
    try {
      const client: any = await prisma.client.findUnique({
        where: { telegramId: telegramId },
        include: {
          subscriptions: {
            where: { status: { in: ['completed', 'active'] } },
            include: { 
              tariff: true,
              // @ts-ignore
              trainer: true
            },
            orderBy: { createdAt: 'desc' },
            take: 4 // –ë–µ—Ä–µ–º 4 (–∞–∫—Ç–∏–≤–Ω—ã–π + 3 –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö)
          }
        }
      });

      if (!client || client.subscriptions.length <= 1) {
        const message = 'üìú –ò—Å—Ç–æ—Ä–∏—è –∞–±–æ–Ω–µ–º–µ–Ω—Ç–æ–≤ –ø—É—Å—Ç–∞.\n\n–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –∞–±–æ–Ω–µ–º–µ–Ω—Ç–æ–≤.';
        const keyboard = {
          inline_keyboard: [
            [{ text: 'üîô –ö –∞–±–æ–Ω–µ–º–µ–Ω—Ç—É', callback_data: 'subscription' }],
            [{ text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'back_to_menu' }]
          ]
        };

        await this.sendOrEditWithWelcomePhoto(chatId, message, keyboard);
        return;
      }

      let message = 'üìú **–ò—Å—Ç–æ—Ä–∏—è –≤–∞—à–∏—Ö –∞–±–æ–Ω–µ–º–µ–Ω—Ç–æ–≤:**\n\n';
      
      client.subscriptions.forEach((subscription: any, index: number) => {
        const tariff = subscription.tariff;
        const startDate = new Date(subscription.startDate).toLocaleDateString('ru-RU');
        const endDate = new Date(subscription.endDate).toLocaleDateString('ru-RU');
        const status = subscription.status === 'active' ? 'üü¢ –ê–∫—Ç–∏–≤–Ω—ã–π' : '‚ö™ –ó–∞–≤–µ—Ä—à—ë–Ω';
        const trainerInfo = subscription.trainer ? `üí™ ${subscription.trainer.name}` : 'üë®‚Äçüí™ –ë–µ–∑ —Ç—Ä–µ–Ω–µ—Ä–∞';
        
        message += `**${index + 1}. ${tariff.name}** ${status}\n`;
        message += `üìÖ ${startDate} - ${endDate}\n`;
        message += `üí∞ ${tariff.price} ‚ÇΩ\n`;
        message += `${trainerInfo}\n`;
        if (index < client.subscriptions.length - 1) {
          message += '\n';
        }
      });

      const keyboard = {
        inline_keyboard: [
          [{ text: 'üìú –î–æ—Å—Ç—É–ø–Ω—ã–µ –∞–±–æ–Ω–µ–º–µ–Ω—Ç—ã', callback_data: 'available_subscriptions' }],
          [{ text: 'üîô –ö –∞–±–æ–Ω–µ–º–µ–Ω—Ç—É', callback_data: 'subscription' }],
          [{ text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'back_to_menu' }]
        ]
      };

      await this.sendOrEditWithWelcomePhoto(chatId, message, keyboard);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏ –∞–±–æ–Ω–µ–º–µ–Ω—Ç–æ–≤:', error);
      const errorMessage = '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏ –∞–±–æ–Ω–µ–º–µ–Ω—Ç–æ–≤.';
      const keyboard = {
        inline_keyboard: [[{ text: 'üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é', callback_data: 'back_to_menu' }]]
      };
      await this.sendOrEditWithWelcomePhoto(chatId, errorMessage, keyboard);
    }
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ QR-–∫–æ–¥–∞
  private async handleQRCode(chatId: number, telegramId: string) {
    try {
      // –ò—â–µ–º –∫–ª–∏–µ–Ω—Ç–∞ –ø–æ telegramId
      const client = await prisma.client.findUnique({
        where: { telegramId: telegramId }
      });

      if (!client) {
        const message = '‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.';
        const keyboard = {
          inline_keyboard: [[{ text: 'üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é', callback_data: 'back_to_menu' }]]
        };

        const edited = await this.editLastMessage(chatId, message, keyboard);
        if (!edited) {
          await this.sendTextMessage(chatId, message, keyboard);
        }
        return;
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ QR-–∫–æ–¥ –≤ –ë–î
      const hasExistingQR = (client as any).qrCode && (client as any).qrCode !== 'qr';
      
      // –ï—Å–ª–∏ QR-–∫–æ–¥–∞ –Ω–µ—Ç, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ (—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ)
      if (!hasExistingQR) {
        const loadingMessage = '‚è≥ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≤–∞—à QR-–∫–æ–¥...';
        const loadingKeyboard = {
          inline_keyboard: [[{ text: 'üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é', callback_data: 'back_to_menu' }]]
        };
        
        const edited = await this.editLastMessage(chatId, loadingMessage, loadingKeyboard);
        if (!edited) {
          await this.sendTextMessage(chatId, loadingMessage, loadingKeyboard);
        }
      }

      // –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º QR-–∫–æ–¥
      const qrUrl = await getOrCreateQRCode(client.id);
      
      // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–º–æ—Ä–æ–∑–∫–µ –¥–ª—è –∫–Ω–æ–ø–æ–∫
      const freezeInfo = await this.getFreezeInfo(client.id);
      
      let message = `üì± –í–∞—à QR-–∫–æ–¥ –¥–ª—è –≤—Ö–æ–¥–∞ –≤ —Ñ–∏—Ç–Ω–µ—Å-–∫–ª—É–±`;
      
      // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–º–æ—Ä–æ–∑–∫–µ
      if (freezeInfo.hasTodayFreeze) {
        message += `\n\nüßä –°–µ–≥–æ–¥–Ω—è —É –≤–∞—Å –∑–∞–º–æ—Ä–æ–∑–∫–∞`;
      } else if (freezeInfo.canFreeze) {
        message += `\n\nüßä –ú–æ–∂–Ω–æ –∑–∞–º–æ—Ä–æ–∑–∏—Ç—å —Å–µ–≥–æ–¥–Ω—è (${freezeInfo.freezeUsed}/${freezeInfo.freezeLimit})`;
      } else if (freezeInfo.freezeUsed >= freezeInfo.freezeLimit) {
        message += `\n\n‚ö†Ô∏è –õ–∏–º–∏—Ç –∑–∞–º–æ—Ä–æ–∑–æ–∫ –∏—Å—á–µ—Ä–ø–∞–Ω (${freezeInfo.freezeUsed}/${freezeInfo.freezeLimit})`;
      }

      const keyboard: any = { inline_keyboard: [] };
      
      // –ö–Ω–æ–ø–∫–∏ –∑–∞–º–æ—Ä–æ–∑–∫–∏
      if (freezeInfo.hasTodayFreeze) {
        keyboard.inline_keyboard.push([
          { text: 'üî• –†–∞–∑–º–æ—Ä–æ–∑–∏—Ç—å —Å–µ–≥–æ–¥–Ω—è', callback_data: 'unfreeze_day' }
        ]);
      } else if (freezeInfo.canFreeze) {
        keyboard.inline_keyboard.push([
          { text: 'üßä –ó–∞–º–æ—Ä–æ–∑–∏—Ç—å —Å–µ–≥–æ–¥–Ω—è', callback_data: 'freeze_day' }
        ]);
      }
      
      // –ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥
      keyboard.inline_keyboard.push([
        { text: 'üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é', callback_data: 'back_to_menu' }
      ]);

      // –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, –∑–∞–º–µ–Ω—è—è –µ–≥–æ –Ω–∞ QR-–∫–æ–¥
      const edited = await this.editLastMediaMessage(chatId, qrUrl, message, keyboard);
      if (!edited) {
        // –ï—Å–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await this.sendPhoto(chatId, qrUrl, message, keyboard);
      }

    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ QR-–∫–æ–¥–∞:', error);
      
      const errorMessage = '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ QR-–∫–æ–¥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.';
      const keyboard = {
        inline_keyboard: [[{ text: 'üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é', callback_data: 'back_to_menu' }]]
      };

      // –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∞–µ—Ç—Å—è - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
      const edited = await this.editLastMessage(chatId, errorMessage, keyboard);
      if (!edited) {
        await this.sendTextMessage(chatId, errorMessage, keyboard);
      }
    }
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–∑—ã–≤–æ–≤ –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
  private async handleFeedback(chatId: number, telegramId: string) {
    try {
      // –ü–æ–ª—É—á–∞–µ–º –∫–ª–∏–µ–Ω—Ç–∞ –ø–æ telegramId
      const client = await prisma.client.findUnique({
        where: { telegramId: telegramId }
      });

      if (!client) {
        const message = '‚ùå –ö–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.';
        const keyboard = {
          inline_keyboard: [[{ text: 'üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é', callback_data: 'back_to_menu' }]]
        };
        
        const edited = await this.editLastMessage(chatId, message, keyboard);
        if (!edited) {
          await this.sendTextMessage(chatId, message, keyboard);
        }
        return;
      }

      // –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Å–æ–æ–±—â–µ–Ω–∏–π –∫–ª–∏–µ–Ω—Ç–∞ (–≤–æ–ø—Ä–æ—Å—ã + –æ—Ç–≤–µ—Ç—ã)
      const recentMessages = await this.getRecentFeedbackMessages(client.id);

      if (recentMessages.length === 0) {
        // –ù–µ—Ç –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π - –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –Ω–∞–ø–∏—Å–∞—Ç—å –æ—Ç–∑—ã–≤
        const message = `üí¨ **–û—Ç–∑—ã–≤—ã –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏**

–ú—ã —Ü–µ–Ω–∏–º –≤–∞—à–µ –º–Ω–µ–Ω–∏–µ! –ü–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å–≤–æ–∏–º–∏ –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏—è–º–∏ –æ –Ω–∞—à–µ–º —Ñ–∏—Ç–Ω–µ—Å-—Ü–µ–Ω—Ç—Ä–µ –∏–ª–∏ –æ—Å—Ç–∞–≤—å—Ç–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –Ω–∞—à–∏—Ö —É—Å–ª—É–≥.

üìù –ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏ –º—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –æ—Ç–≤–µ—Ç–∏–º!`;

        const keyboard = {
          inline_keyboard: [[{ text: 'üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é', callback_data: 'back_to_menu' }]]
        };

        // –í–∫–ª—é—á–∞–µ–º —Ä–µ–∂–∏–º –≤–≤–æ–¥–∞ –æ—Ç–∑—ã–≤–∞
        this.feedbackMode.set(chatId, true);
        
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤–º–µ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–æ–≤–æ–≥–æ
        const edited = await this.editLastMessage(chatId, message, keyboard);
        if (!edited) {
          await this.sendTextMessage(chatId, message, keyboard);
        }
      } else {
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π
        await this.showFeedbackHistory(chatId, recentMessages);
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç–∑—ã–≤–æ–≤:', error);
      const errorMessage = '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ç–∑—ã–≤–æ–≤.';
      const keyboard = {
        inline_keyboard: [[{ text: 'üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é', callback_data: 'back_to_menu' }]]
      };
      
      const edited = await this.editLastMessage(chatId, errorMessage, keyboard);
      if (!edited) {
        await this.sendTextMessage(chatId, errorMessage, keyboard);
      }
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç–∑—ã–≤–æ–≤ –∫–ª–∏–µ–Ω—Ç–∞
  private async getRecentFeedbackMessages(clientId: number) {
    try {
      // –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å - –ø–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞ –∏ –æ—Ç–≤–µ—Ç—ã –Ω–∞ –Ω–∏—Ö
      const messages = await prisma.$queryRaw<Array<{
        id: number;
        client_id: number | null;
        parent_id: number | null;
        sender_role: string;
        message: string;
        created_at: Date;
      }>>`
        SELECT 
          f.id, 
          f.client_id, 
          f.parent_id, 
          f.sender_role, 
          f.message, 
          f.created_at
        FROM feedback f
        WHERE 
          f.client_id = ${clientId}
          OR (
            f.sender_role = 'admin' 
            AND f.parent_id IN (
              SELECT id FROM feedback 
              WHERE client_id = ${clientId} AND sender_role = 'user'
            )
          )
        ORDER BY f.created_at ASC
        LIMIT 20
      `;

      return messages.map(msg => ({
        id: msg.id,
        message: msg.message,
        senderRole: msg.sender_role,
        createdAt: msg.created_at,
        isReply: !!msg.parent_id,
        parentId: msg.parent_id
      }));
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç–∑—ã–≤–æ–≤:', error);
      return [];
    }
  }

  // –ü–æ–∫–∞–∑–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é –æ—Ç–∑—ã–≤–æ–≤
  private async showFeedbackHistory(chatId: number, messages: any[]) {
    let historyText = `üí¨ **–ò—Å—Ç–æ—Ä–∏—è –≤–∞—à–∏—Ö –æ–±—Ä–∞—â–µ–Ω–∏–π**\n\n`;

    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ –≤—Ä–µ–º–µ–Ω–∏ —Å–æ–∑–¥–∞–Ω–∏—è
    const sortedMessages = messages.sort((a, b) => 
      new Date(a.createdAt).getTime() - new Date(b.createdAt).getTime()
    );

    // –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Å–æ–æ–±—â–µ–Ω–∏–π
    const recentMessages = sortedMessages.slice(-10);

    // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Ö—Ä–æ–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–º –ø–æ—Ä—è–¥–∫–µ
    recentMessages.forEach(msg => {
      if (msg.senderRole === 'user') {
        historyText += `üèãÔ∏è: "${msg.message}"\n`;
      } else {
        historyText += `üë§: "${msg.message}"\n`;
      }
    });

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const lastMessage = recentMessages[recentMessages.length - 1];
    const hasUnreadUserMessages = recentMessages.some(msg => {
      if (msg.senderRole === 'user') {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –æ—Ç–≤–µ—Ç –∞–¥–º–∏–Ω–∞ –ø–æ—Å–ª–µ —ç—Ç–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        const hasAdminReply = recentMessages.some(adminMsg => 
          adminMsg.senderRole === 'admin' && 
          new Date(adminMsg.createdAt) > new Date(msg.createdAt)
        );
        return !hasAdminReply;
      }
      return false;
    });

    if (hasUnreadUserMessages) {
      historyText += `\n‚è≥ –ñ–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç–∞...\n`;
    }

    historyText += `\nüìù –ß—Ç–æ–±—ã –æ—Å—Ç–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –æ—Ç–∑—ã–≤, –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.`;

    const keyboard = {
      inline_keyboard: [
        [{ text: 'üîÑ –û–±–Ω–æ–≤–∏—Ç—å', callback_data: 'feedback_refresh' }],
        [{ text: 'üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é', callback_data: 'back_to_menu' }]
      ]
    };

    // –í–∫–ª—é—á–∞–µ–º —Ä–µ–∂–∏–º –≤–≤–æ–¥–∞ –Ω–æ–≤–æ–≥–æ –æ—Ç–∑—ã–≤–∞
    this.feedbackMode.set(chatId, true);
    
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤–º–µ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–æ–≤–æ–≥–æ
    const edited = await this.editLastMessage(chatId, historyText, keyboard);
    if (!edited) {
      await this.sendTextMessage(chatId, historyText, keyboard);
    }
  }

  // –ü–æ–∫–∞–∑–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é –æ—Ç–∑—ã–≤–æ–≤ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º –æ—Ç–ø—Ä–∞–≤–∫–∏
  private async showFeedbackHistoryWithConfirmation(chatId: number, messages: any[], lastMessage: string) {
    let historyText = `‚úÖ **–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!**\n\n`;
    historyText += `üí¨ **–ò—Å—Ç–æ—Ä–∏—è –≤–∞—à–∏—Ö –æ–±—Ä–∞—â–µ–Ω–∏–π**\n\n`;

    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ –≤—Ä–µ–º–µ–Ω–∏ —Å–æ–∑–¥–∞–Ω–∏—è
    const sortedMessages = messages.sort((a, b) => 
      new Date(a.createdAt).getTime() - new Date(b.createdAt).getTime()
    );

    // –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Å–æ–æ–±—â–µ–Ω–∏–π
    const recentMessages = sortedMessages.slice(-10);

    // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Ö—Ä–æ–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–º –ø–æ—Ä—è–¥–∫–µ
    recentMessages.forEach(msg => {
      if (msg.senderRole === 'user') {
        historyText += `üèãÔ∏è: "${msg.message}"\n`;
      } else {
        historyText += `üë§: "${msg.message}"\n`;
      }
    });

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const hasUnreadUserMessages = recentMessages.some(msg => {
      if (msg.senderRole === 'user') {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –æ—Ç–≤–µ—Ç –∞–¥–º–∏–Ω–∞ –ø–æ—Å–ª–µ —ç—Ç–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        const hasAdminReply = recentMessages.some(adminMsg => 
          adminMsg.senderRole === 'admin' && 
          new Date(adminMsg.createdAt) > new Date(msg.createdAt)
        );
        return !hasAdminReply;
      }
      return false;
    });

    if (hasUnreadUserMessages) {
      historyText += `\n‚è≥ –ñ–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç–∞...\n`;
    }

    historyText += `\nüìù **–ù–∞–ø–∏—à–∏—Ç–µ –µ—â–µ –æ–¥–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ** –∏–ª–∏ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –º–µ–Ω—é.`;

    const keyboard = {
      inline_keyboard: [
        [{ text: 'üîÑ –û–±–Ω–æ–≤–∏—Ç—å', callback_data: 'feedback_refresh' }],
        [{ text: 'üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é', callback_data: 'back_to_menu' }]
      ]
    };

    // –†–µ–∂–∏–º –≤–≤–æ–¥–∞ –æ—Å—Ç–∞–µ—Ç—Å—è –∞–∫—Ç–∏–≤–Ω—ã–º
    await this.sendMessage(chatId, historyText, {
      parse_mode: 'Markdown',
      reply_markup: keyboard
    });
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç–∑—ã–≤–æ–≤
  private async handleFeedbackRefresh(chatId: number, telegramId: string) {
    try {
      // –ü–æ–ª—É—á–∞–µ–º –∫–ª–∏–µ–Ω—Ç–∞ –ø–æ telegramId
      const client = await prisma.client.findUnique({
        where: { telegramId: telegramId }
      });

      if (!client) {
        const message = '‚ùå –ö–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.';
        const keyboard = {
          inline_keyboard: [[{ text: 'üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é', callback_data: 'back_to_menu' }]]
        };
        
        const edited = await this.editLastMessage(chatId, message, keyboard);
        if (!edited) {
          await this.sendTextMessage(chatId, message, keyboard);
        }
        return;
      }

      // –ü–æ–ª—É—á–∞–µ–º —Å–≤–µ–∂–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
      const recentMessages = await this.getRecentFeedbackMessages(client.id);

      if (recentMessages.length === 0) {
        // –ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –Ω–∞–ø–∏—Å–∞—Ç—å –æ—Ç–∑—ã–≤
        const message = `üí¨ **–û—Ç–∑—ã–≤—ã –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏**

–ú—ã —Ü–µ–Ω–∏–º –≤–∞—à–µ –º–Ω–µ–Ω–∏–µ! –ü–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å–≤–æ–∏–º–∏ –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏—è–º–∏ –æ –Ω–∞—à–µ–º —Ñ–∏—Ç–Ω–µ—Å-—Ü–µ–Ω—Ç—Ä–µ –∏–ª–∏ –æ—Å—Ç–∞–≤—å—Ç–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –Ω–∞—à–∏—Ö —É—Å–ª—É–≥.

üìù –ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏ –º—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –æ—Ç–≤–µ—Ç–∏–º!`;

        const keyboard = {
          inline_keyboard: [[{ text: 'üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é', callback_data: 'back_to_menu' }]]
        };

        // –í–∫–ª—é—á–∞–µ–º —Ä–µ–∂–∏–º –≤–≤–æ–¥–∞ –æ—Ç–∑—ã–≤–∞
        this.feedbackMode.set(chatId, true);
        
        const edited = await this.editLastMessage(chatId, message, keyboard);
        if (!edited) {
          await this.sendTextMessage(chatId, message, keyboard);
        }
      } else {
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π
        await this.showFeedbackHistory(chatId, recentMessages);
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –æ—Ç–∑—ã–≤–æ–≤:', error);
      const errorMessage = '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –æ—Ç–∑—ã–≤–æ–≤.';
      const keyboard = {
        inline_keyboard: [[{ text: 'üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é', callback_data: 'back_to_menu' }]]
      };
      
      const edited = await this.editLastMessage(chatId, errorMessage, keyboard);
      if (!edited) {
        await this.sendTextMessage(chatId, errorMessage, keyboard);
      }
    }
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç–∑—ã–≤–∞
  private async handleFeedbackMessage(chatId: number, telegramId: string, message: string) {
    try {
      // –ü–æ–ª—É—á–∞–µ–º –∫–ª–∏–µ–Ω—Ç–∞
      const client = await prisma.client.findUnique({
        where: { telegramId: telegramId }
      });

      if (!client) {
        await this.sendTextMessage(chatId, '‚ùå –ö–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.');
        this.feedbackMode.delete(chatId);
        return;
      }

      // –ù–∞—Ö–æ–¥–∏–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞ –¥–ª—è —ç—Ç–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞
      const lastAdminMessage = await prisma.feedback.findFirst({
        where: {
          clientId: client.id,
          senderRole: 'admin'
        },
        orderBy: {
          createdAt: 'desc'
        }
      });

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º parent_id
      await prisma.feedback.create({
        data: {
          clientId: client.id,
          senderRole: 'user',
          message: message.trim(),
          parentId: lastAdminMessage?.id || null // –°–≤—è–∑—ã–≤–∞–µ–º —Å –ø–æ—Å–ª–µ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º –∞–¥–º–∏–Ω–∞
        }
      });

      // –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
      await this.deletePreviousMessages(chatId);

      // –ù–ï –æ—Ç–∫–ª—é—á–∞–µ–º —Ä–µ–∂–∏–º –≤–≤–æ–¥–∞ –æ—Ç–∑—ã–≤–∞ - –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç –ø–∏—Å–∞—Ç—å –¥–∞–ª—å—à–µ
      // this.feedbackMode.delete(chatId); // –û—Å—Ç–∞–≤–ª—è–µ–º –≤–∫–ª—é—á–µ–Ω–Ω—ã–º!

      // –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∏—Å—Ç–æ—Ä–∏—é –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
      const updatedMessages = await this.getRecentFeedbackMessages(client.id);
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∏—Å—Ç–æ—Ä–∏—é —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º
      await this.showFeedbackHistoryWithConfirmation(chatId, updatedMessages, message);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ—Ç–∑—ã–≤–∞:', error);
      await this.sendTextMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
      this.feedbackMode.delete(chatId);
    }
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤
  private async handleContacts(chatId: number) {
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∏–Ω–¥–µ–∫—Å –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –æ—Ç–∫—Ä—ã—Ç–∏–∏
    this.contactsPage.set(chatId, 0);
    await this.showContacts(chatId);
  }

  // –ü–æ–∫–∞–∑–∞—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç—ã —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
  private async showContacts(chatId: number) {
    try {
      const contacts = await prisma.contact.findMany({
        orderBy: { id: 'asc' }
      });

      if (!contacts || contacts.length === 0) {
        const message = '‚ùå –ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.';
        const keyboard = {
          inline_keyboard: [[{ text: 'üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é', callback_data: 'back_to_menu' }]]
        };

        await this.sendOrEditWithWelcomePhoto(chatId, message, keyboard);
        return;
      }

      const currentIndex = this.contactsPage.get(chatId) || 0;
      const contact = contacts[currentIndex];
      const totalContacts = contacts.length;

      const socialLinks = contact.socialLinks as any;
      let socialText = '';
      
      if (socialLinks) {
        if (socialLinks.instagram) socialText += `üì∏ [Instagram](${socialLinks.instagram})\n`;
        if (socialLinks.vk) socialText += `üîµ [–í–ö–æ–Ω—Ç–∞–∫—Ç–µ](${socialLinks.vk})\n`;
        if (socialLinks.telegram) socialText += `üì± [Telegram](${socialLinks.telegram})\n`;
      }

      let message = '';
      
      if (totalContacts > 1) {
        message = `üìû **–ö–æ–Ω—Ç–∞–∫—Ç—ã —Ñ–∏—Ç–Ω–µ—Å-–∫–ª—É–±–∞** (${currentIndex + 1}/${totalContacts})

üì± **–¢–µ–ª–µ—Ñ–æ–Ω:** ${contact.phone}
üìç **–ê–¥—Ä–µ—Å:** ${contact.address}

${socialText}`;
      } else {
        message = `üìû **–ö–æ–Ω—Ç–∞–∫—Ç—ã —Ñ–∏—Ç–Ω–µ—Å-–∫–ª—É–±–∞**

üì± **–¢–µ–ª–µ—Ñ–æ–Ω:** ${contact.phone}
üìç **–ê–¥—Ä–µ—Å:** ${contact.address}

${socialText}`;
      }

      if (contact.mapLink) {
        message += `\nüó∫Ô∏è [–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∞ –∫–∞—Ä—Ç–µ](${contact.mapLink})`;
      }

      // –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –Ω–∞–≤–∏–≥–∞—Ü–∏–µ–π
      const keyboard: any = { inline_keyboard: [] };

      // –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –±–æ–ª—å—à–µ –æ–¥–Ω–æ–≥–æ)
      if (totalContacts > 1) {
        const navButtons = [];
        if (currentIndex > 0) {
          navButtons.push({ text: '‚¨ÖÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∏–π —Ñ–∏–ª–∏–∞–ª', callback_data: 'contacts_prev' });
        }
        if (currentIndex < totalContacts - 1) {
          navButtons.push({ text: '–°–ª–µ–¥—É—é—â–∏–π —Ñ–∏–ª–∏–∞–ª ‚û°Ô∏è', callback_data: 'contacts_next' });
        }
        if (navButtons.length > 0) {
          keyboard.inline_keyboard.push(navButtons);
        }
      }

      // –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é"
      keyboard.inline_keyboard.push([{ text: 'üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é', callback_data: 'back_to_menu' }]);

      await this.sendOrEditWithWelcomePhoto(chatId, message, keyboard);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤:', error);
      const errorMessage = '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ–Ω—Ç–∞–∫—Ç–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.';
      const keyboard = {
        inline_keyboard: [[{ text: 'üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é', callback_data: 'back_to_menu' }]]
      };
      await this.sendOrEditWithWelcomePhoto(chatId, errorMessage, keyboard);
    }
  }

  // –ü—Ä–µ–¥—ã–¥—É—â–∏–π –∫–æ–Ω—Ç–∞–∫—Ç
  private async handleContactsPrev(chatId: number) {
    const currentIndex = this.contactsPage.get(chatId) || 0;
    if (currentIndex > 0) {
      this.contactsPage.set(chatId, currentIndex - 1);
      await this.showContacts(chatId);
    }
  }

  // –°–ª–µ–¥—É—é—â–∏–π –∫–æ–Ω—Ç–∞–∫—Ç
  private async handleContactsNext(chatId: number) {
    const contacts = await prisma.contact.findMany();
    const currentIndex = this.contactsPage.get(chatId) || 0;
    
    if (currentIndex < contacts.length - 1) {
      this.contactsPage.set(chatId, currentIndex + 1);
      await this.showContacts(chatId);
    }
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–¥—É–∫—Ç–æ–≤
  private async handleProducts(chatId: number) {
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –æ—Ç–∫—Ä—ã—Ç–∏–∏
    this.productsPage.set(chatId, 0);
    this.productPhotoPage.set(chatId, 0);
    await this.showProducts(chatId);
  }

  // –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ–¥—É–∫—Ç—ã —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
  private async showProducts(chatId: number) {
    try {
      const products = await prisma.product.findMany({
        orderBy: { createdAt: 'desc' }
      });

      if (!products || products.length === 0) {
        const message = '‚ùå –ü—Ä–æ–¥—É–∫—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.';
        const keyboard = {
          inline_keyboard: [[{ text: 'üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é', callback_data: 'back_to_menu' }]]
        };

        await this.sendTextMessage(chatId, message, keyboard);
        return;
      }

      const currentProductIndex = this.productsPage.get(chatId) || 0;
      const currentPhotoIndex = this.productPhotoPage.get(chatId) || 0;
      const product = products[currentProductIndex];
      const totalProducts = products.length;

      // –ò–∑–≤–ª–µ–∫–∞–µ–º URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
      const imageUrls = this.extractImageUrls(product.photoUrl);
      const totalPhotos = imageUrls.length;
      const hasPhotos = totalPhotos > 0;

      // –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–¥–ø–∏—Å—å –∫ —Ç–æ–≤–∞—Ä—É
      let caption = `üõçÔ∏è **${product.name}**`;
      
      if (totalProducts > 1) {
        caption += ` (${currentProductIndex + 1}/${totalProducts})`;
      }
      
      if (hasPhotos && totalPhotos > 1) {
        caption += `\nüì∏ –§–æ—Ç–æ ${currentPhotoIndex + 1}/${totalPhotos}`;
      }

      caption += `\n\nüí∞ **–¶–µ–Ω–∞:** ${product.price} ‚ÇΩ\n\nüìù ${product.description}`;

      // –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –Ω–∞–≤–∏–≥–∞—Ü–∏–µ–π
      const keyboard: any = { inline_keyboard: [] };

      // –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ —Ñ–æ—Ç–æ (–µ—Å–ª–∏ —Ñ–æ—Ç–æ –±–æ–ª—å—à–µ –æ–¥–Ω–æ–≥–æ)
      if (hasPhotos && totalPhotos > 1) {
        const photoButtons = [];
        if (currentPhotoIndex > 0) {
          photoButtons.push({ text: '‚¨ÖÔ∏è –§–æ—Ç–æ', callback_data: 'product_photo_prev' });
        }
        if (currentPhotoIndex < totalPhotos - 1) {
          photoButtons.push({ text: '–§–æ—Ç–æ ‚û°Ô∏è', callback_data: 'product_photo_next' });
        }
        if (photoButtons.length > 0) {
          keyboard.inline_keyboard.push(photoButtons);
        }
      }

      // –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ —Ç–æ–≤–∞—Ä–∞–º (–µ—Å–ª–∏ —Ç–æ–≤–∞—Ä–æ–≤ –±–æ–ª—å—à–µ –æ–¥–Ω–æ–≥–æ)
      if (totalProducts > 1) {
        const productButtons = [];
        if (currentProductIndex > 0) {
          productButtons.push({ text: '‚¨ÖÔ∏è –¢–æ–≤–∞—Ä', callback_data: 'products_prev' });
        }
        if (currentProductIndex < totalProducts - 1) {
          productButtons.push({ text: '–¢–æ–≤–∞—Ä ‚û°Ô∏è', callback_data: 'products_next' });
        }
        if (productButtons.length > 0) {
          keyboard.inline_keyboard.push(productButtons);
        }
      }

      // –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é"
      keyboard.inline_keyboard.push([{ text: 'üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é', callback_data: 'back_to_menu' }]);

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
      if (hasPhotos) {
        const currentPhotoUrl = imageUrls[currentPhotoIndex];
        const lastMessage = this.lastBotMessage.get(chatId);
        
        if (lastMessage?.hasPhoto) {
          // –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Ñ–æ—Ç–æ
          const edited = await this.editLastMediaMessage(chatId, currentPhotoUrl, caption, keyboard);
          if (!edited) {
            await this.deletePreviousMessages(chatId);
            await this.sendPhoto(chatId, currentPhotoUrl, caption, keyboard);
          }
        } else {
          // –ü—Ä–µ–¥—ã–¥—É—â–µ–µ –±—ã–ª–æ —Ç–µ–∫—Å—Ç–æ–≤—ã–º, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Ñ–æ—Ç–æ
          await this.deletePreviousMessages(chatId);
          await this.sendPhoto(chatId, currentPhotoUrl, caption, keyboard);
        }
      } else {
        // –¢–æ–≤–∞—Ä –±–µ–∑ —Ñ–æ—Ç–æ - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await this.sendTextMessage(chatId, caption, keyboard);
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ–¥—É–∫—Ç–æ–≤:', error);
      const errorMessage = '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø—Ä–æ–¥—É–∫—Ç–æ–≤.';
      const edited = await this.editLastMessage(chatId, errorMessage);
      if (!edited) {
        await this.sendMessage(chatId, errorMessage);
      }
    }
  }

  // –ü—Ä–µ–¥—ã–¥—É—â–∏–π —Ç–æ–≤–∞—Ä
  private async handleProductsPrev(chatId: number) {
    const currentIndex = this.productsPage.get(chatId) || 0;
    if (currentIndex > 0) {
      this.productsPage.set(chatId, currentIndex - 1);
      this.productPhotoPage.set(chatId, 0); // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–æ—Ç–æ –Ω–∞ –ø–µ—Ä–≤–æ–µ
      await this.showProducts(chatId);
    }
  }

  // –°–ª–µ–¥—É—é—â–∏–π —Ç–æ–≤–∞—Ä
  private async handleProductsNext(chatId: number) {
    const products = await prisma.product.findMany();
    const currentIndex = this.productsPage.get(chatId) || 0;
    
    if (currentIndex < products.length - 1) {
      this.productsPage.set(chatId, currentIndex + 1);
      this.productPhotoPage.set(chatId, 0); // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–æ—Ç–æ –Ω–∞ –ø–µ—Ä–≤–æ–µ
      await this.showProducts(chatId);
    }
  }

  // –ü—Ä–µ–¥—ã–¥—É—â–µ–µ —Ñ–æ—Ç–æ —Ç–æ–≤–∞—Ä–∞
  private async handleProductPhotoPrev(chatId: number) {
    const currentIndex = this.productPhotoPage.get(chatId) || 0;
    if (currentIndex > 0) {
      this.productPhotoPage.set(chatId, currentIndex - 1);
      await this.showProducts(chatId);
    }
  }

  // –°–ª–µ–¥—É—é—â–µ–µ —Ñ–æ—Ç–æ —Ç–æ–≤–∞—Ä–∞
  private async handleProductPhotoNext(chatId: number) {
    try {
      const products = await prisma.product.findMany({ orderBy: { createdAt: 'desc' } });
      const currentProductIndex = this.productsPage.get(chatId) || 0;
      const product = products[currentProductIndex];
      
      if (product) {
        const imageUrls = this.extractImageUrls(product.photoUrl);
        const currentPhotoIndex = this.productPhotoPage.get(chatId) || 0;
        
        if (currentPhotoIndex < imageUrls.length - 1) {
          this.productPhotoPage.set(chatId, currentPhotoIndex + 1);
          await this.showProducts(chatId);
        }
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏ —Ñ–æ—Ç–æ:', error);
    }
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç—Ä–µ–Ω–µ—Ä–æ–≤
  private async handleTrainers(chatId: number) {
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –æ—Ç–∫—Ä—ã—Ç–∏–∏
    this.trainersPage.set(chatId, 0);
    this.trainerPhotoPage.set(chatId, 0);
    await this.showTrainers(chatId);
  }

  // –ü–æ–∫–∞–∑–∞—Ç—å —Ç—Ä–µ–Ω–µ—Ä–æ–≤ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
  private async showTrainers(chatId: number) {
    try {
      const trainers = await prisma.trainer.findMany({
        orderBy: { createdAt: 'desc' }
      });

      if (!trainers || trainers.length === 0) {
        const message = '‚ùå –¢—Ä–µ–Ω–µ—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.';
        const keyboard = {
          inline_keyboard: [[{ text: 'üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é', callback_data: 'back_to_menu' }]]
        };

        await this.sendTextMessage(chatId, message, keyboard);
        return;
      }

      const currentTrainerIndex = this.trainersPage.get(chatId) || 0;
      const currentPhotoIndex = this.trainerPhotoPage.get(chatId) || 0;
      const trainer = trainers[currentTrainerIndex];
      const totalTrainers = trainers.length;

      // –ò–∑–≤–ª–µ–∫–∞–µ–º URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
      const imageUrls = this.extractImageUrls(trainer.photoUrl);
      const totalPhotos = imageUrls.length;
      const hasPhotos = totalPhotos > 0;

      // –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–¥–ø–∏—Å—å –∫ —Ç—Ä–µ–Ω–µ—Ä—É
      let caption = `üí™ **${trainer.name}**`;
      
      if (totalTrainers > 1) {
        caption += ` (${currentTrainerIndex + 1}/${totalTrainers})`;
      }
      
      if (hasPhotos && totalPhotos > 1) {
        caption += `\nüì∏ –§–æ—Ç–æ ${currentPhotoIndex + 1}/${totalPhotos}`;
      }

      caption += `\n\nüí∞ **–¶–µ–Ω–∞ –∑–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É:** ${trainer.price} ‚ÇΩ\n\nüìù ${trainer.description}`;

      // –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –Ω–∞–≤–∏–≥–∞—Ü–∏–µ–π
      const keyboard: any = { inline_keyboard: [] };

      // –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ —Ñ–æ—Ç–æ (–µ—Å–ª–∏ —Ñ–æ—Ç–æ –±–æ–ª—å—à–µ –æ–¥–Ω–æ–≥–æ)
      if (hasPhotos && totalPhotos > 1) {
        const photoButtons = [];
        if (currentPhotoIndex > 0) {
          photoButtons.push({ text: '‚¨ÖÔ∏è –§–æ—Ç–æ', callback_data: 'trainer_photo_prev' });
        }
        if (currentPhotoIndex < totalPhotos - 1) {
          photoButtons.push({ text: '–§–æ—Ç–æ ‚û°Ô∏è', callback_data: 'trainer_photo_next' });
        }
        if (photoButtons.length > 0) {
          keyboard.inline_keyboard.push(photoButtons);
        }
      }

      // –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ —Ç—Ä–µ–Ω–µ—Ä–∞–º (–µ—Å–ª–∏ —Ç—Ä–µ–Ω–µ—Ä–æ–≤ –±–æ–ª—å—à–µ –æ–¥–Ω–æ–≥–æ)
      if (totalTrainers > 1) {
        const trainerButtons = [];
        if (currentTrainerIndex > 0) {
          trainerButtons.push({ text: '‚¨ÖÔ∏è –¢—Ä–µ–Ω–µ—Ä', callback_data: 'trainers_prev' });
        }
        if (currentTrainerIndex < totalTrainers - 1) {
          trainerButtons.push({ text: '–¢—Ä–µ–Ω–µ—Ä ‚û°Ô∏è', callback_data: 'trainers_next' });
        }
        if (trainerButtons.length > 0) {
          keyboard.inline_keyboard.push(trainerButtons);
        }
      }

      // –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é"
      keyboard.inline_keyboard.push([{ text: 'üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é', callback_data: 'back_to_menu' }]);

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
      if (hasPhotos) {
        const currentPhotoUrl = imageUrls[currentPhotoIndex];
        const lastMessage = this.lastBotMessage.get(chatId);
        
        if (lastMessage?.hasPhoto) {
          // –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Ñ–æ—Ç–æ
          const edited = await this.editLastMediaMessage(chatId, currentPhotoUrl, caption, keyboard);
          if (!edited) {
            await this.deletePreviousMessages(chatId);
            await this.sendPhoto(chatId, currentPhotoUrl, caption, keyboard);
          }
        } else {
          // –ü—Ä–µ–¥—ã–¥—É—â–µ–µ –±—ã–ª–æ —Ç–µ–∫—Å—Ç–æ–≤—ã–º, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Ñ–æ—Ç–æ
          await this.deletePreviousMessages(chatId);
          await this.sendPhoto(chatId, currentPhotoUrl, caption, keyboard);
        }
      } else {
        // –¢—Ä–µ–Ω–µ—Ä –±–µ–∑ —Ñ–æ—Ç–æ - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await this.sendTextMessage(chatId, caption, keyboard);
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç—Ä–µ–Ω–µ—Ä–æ–≤:', error);
      const errorMessage = '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Ç—Ä–µ–Ω–µ—Ä–æ–≤.';
      const edited = await this.editLastMessage(chatId, errorMessage);
      if (!edited) {
        await this.sendMessage(chatId, errorMessage);
      }
    }
  }

  // –ü—Ä–µ–¥—ã–¥—É—â–∏–π —Ç—Ä–µ–Ω–µ—Ä
  private async handleTrainersPrev(chatId: number) {
    const currentIndex = this.trainersPage.get(chatId) || 0;
    if (currentIndex > 0) {
      this.trainersPage.set(chatId, currentIndex - 1);
      this.trainerPhotoPage.set(chatId, 0); // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–æ—Ç–æ –Ω–∞ –ø–µ—Ä–≤–æ–µ
      await this.showTrainers(chatId);
    }
  }

  // –°–ª–µ–¥—É—é—â–∏–π —Ç—Ä–µ–Ω–µ—Ä
  private async handleTrainersNext(chatId: number) {
    const trainers = await prisma.trainer.findMany();
    const currentIndex = this.trainersPage.get(chatId) || 0;
    
    if (currentIndex < trainers.length - 1) {
      this.trainersPage.set(chatId, currentIndex + 1);
      this.trainerPhotoPage.set(chatId, 0); // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–æ—Ç–æ –Ω–∞ –ø–µ—Ä–≤–æ–µ
      await this.showTrainers(chatId);
    }
  }

  // –ü—Ä–µ–¥—ã–¥—É—â–µ–µ —Ñ–æ—Ç–æ —Ç—Ä–µ–Ω–µ—Ä–∞
  private async handleTrainerPhotoPrev(chatId: number) {
    const currentIndex = this.trainerPhotoPage.get(chatId) || 0;
    if (currentIndex > 0) {
      this.trainerPhotoPage.set(chatId, currentIndex - 1);
      await this.showTrainers(chatId);
    }
  }

  // –°–ª–µ–¥—É—é—â–µ–µ —Ñ–æ—Ç–æ —Ç—Ä–µ–Ω–µ—Ä–∞
  private async handleTrainerPhotoNext(chatId: number) {
    try {
      const trainers = await prisma.trainer.findMany({ orderBy: { createdAt: 'desc' } });
      const currentTrainerIndex = this.trainersPage.get(chatId) || 0;
      const trainer = trainers[currentTrainerIndex];
      
      if (trainer) {
        const imageUrls = this.extractImageUrls(trainer.photoUrl);
        const currentPhotoIndex = this.trainerPhotoPage.get(chatId) || 0;
        
        if (currentPhotoIndex < imageUrls.length - 1) {
          this.trainerPhotoPage.set(chatId, currentPhotoIndex + 1);
          await this.showTrainers(chatId);
        }
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏ —Ñ–æ—Ç–æ —Ç—Ä–µ–Ω–µ—Ä–∞:', error);
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ URL –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–π –∫–∞—Ä—Ç–∏–Ω–∫–∏
  private async getWelcomeImageUrl(): Promise<string | null> {
    try {
      const setting = await prisma.setting.findUnique({
        where: { key: 'welcome_image_url' }
      });
      return setting?.value || null;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ URL –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–π –∫–∞—Ä—Ç–∏–Ω–∫–∏:', error);
      return null;
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è—Ö –∑–∞–º–æ—Ä–æ–∑–∫–∏
  private async getFreezeInfo(clientId: number) {
    try {
      const client = await prisma.client.findUnique({
        where: { id: clientId },
        include: {
          subscriptions: {
            where: { status: 'active' },
            include: { tariff: true },
            orderBy: { endDate: 'desc' }
          }
        }
      });

      if (!client || !client.subscriptions[0]) {
        return { canFreeze: false, hasTodayFreeze: false, freezeUsed: 0, freezeLimit: 0 };
      }

      const activeSubscription = client.subscriptions[0];
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∑–∞–º–æ—Ä–æ–∑–∫–∞ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
      const today = new Date();
      today.setHours(0, 0, 0, 0);
      const tomorrow = new Date(today);
      tomorrow.setDate(tomorrow.getDate() + 1);

      const todayFreeze = await prisma.visit.findFirst({
        where: {
          clientId: clientId,
          subscriptionId: activeSubscription.id,
          visitDate: {
            gte: today,
            lt: tomorrow
          },
          isFreezeDay: true
        }
      });

      const canFreeze = activeSubscription.freezeUsed < activeSubscription.tariff.freezeLimit && !todayFreeze;
      
      return {
        canFreeze,
        hasTodayFreeze: !!todayFreeze,
        freezeUsed: activeSubscription.freezeUsed,
        freezeLimit: activeSubscription.tariff.freezeLimit,
        todayFreezeId: todayFreeze?.id
      };
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–º–æ—Ä–æ–∑–∫–µ:', error);
      return { canFreeze: false, hasTodayFreeze: false, freezeUsed: 0, freezeLimit: 0 };
    }
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–º–æ—Ä–æ–∑–∫–∏ –¥–Ω—è
  private async handleFreezeDay(chatId: number, telegramId: string) {
    try {
      const response = await fetch(`${process.env.INTERNAL_API_URL || 'http://app:3000'}/api/visits`, {
        method: 'PATCH',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          telegramId,
          action: 'freeze'
        })
      });

      const result = await response.json();

      if (result.success) {
        // –û–±–Ω–æ–≤–ª—è–µ–º QR-–º–µ–Ω—é —Å –Ω–æ–≤–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
        await this.handleQRCode(chatId, telegramId);
      } else {
        const errorMessage = `‚ùå ${result.error || '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–º–æ—Ä–æ–∑–∫–µ'}`;
        const keyboard = {
          inline_keyboard: [
            [{ text: 'üîô –ù–∞–∑–∞–¥ –∫ QR-–∫–æ–¥—É', callback_data: 'qr_code' }],
            [{ text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'back_to_menu' }]
          ]
        };
        
        const edited = await this.editLastMessage(chatId, errorMessage, keyboard);
        if (!edited) {
          await this.sendTextMessage(chatId, errorMessage, keyboard);
        }
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–º–æ—Ä–æ–∑–∫–µ –¥–Ω—è:', error);
      const errorMessage = '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–º–æ—Ä–æ–∑–∫–µ –¥–Ω—è';
      const keyboard = {
        inline_keyboard: [
          [{ text: 'üîô –ù–∞–∑–∞–¥ –∫ QR-–∫–æ–¥—É', callback_data: 'qr_code' }]
        ]
      };
      
      const edited = await this.editLastMessage(chatId, errorMessage, keyboard);
      if (!edited) {
        await this.sendTextMessage(chatId, errorMessage, keyboard);
      }
    }
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑–º–æ—Ä–æ–∑–∫–∏ –¥–Ω—è
  private async handleUnfreezeDay(chatId: number, telegramId: string) {
    try {
      const response = await fetch(`${process.env.INTERNAL_API_URL || 'http://app:3000'}/api/visits`, {
        method: 'PATCH',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          telegramId,
          action: 'unfreeze'
        })
      });

      const result = await response.json();

      if (result.success) {
        // –û–±–Ω–æ–≤–ª—è–µ–º QR-–º–µ–Ω—é —Å –Ω–æ–≤–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
        await this.handleQRCode(chatId, telegramId);
      } else {
        const errorMessage = `‚ùå ${result.error || '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–º–æ—Ä–æ–∑–∫–µ'}`;
        const keyboard = {
          inline_keyboard: [
            [{ text: 'üîô –ù–∞–∑–∞–¥ –∫ QR-–∫–æ–¥—É', callback_data: 'qr_code' }],
            [{ text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'back_to_menu' }]
          ]
        };
        
        const edited = await this.editLastMessage(chatId, errorMessage, keyboard);
        if (!edited) {
          await this.sendTextMessage(chatId, errorMessage, keyboard);
        }
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–º–æ—Ä–æ–∑–∫–µ –¥–Ω—è:', error);
      const errorMessage = '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–º–æ—Ä–æ–∑–∫–µ –¥–Ω—è';
      const keyboard = {
        inline_keyboard: [
          [{ text: 'üîô –ù–∞–∑–∞–¥ –∫ QR-–∫–æ–¥—É', callback_data: 'qr_code' }]
        ]
      };
      
      const edited = await this.editLastMessage(chatId, errorMessage, keyboard);
      if (!edited) {
        await this.sendTextMessage(chatId, errorMessage, keyboard);
      }
    }
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞–±–æ–Ω–µ–º–µ–Ω—Ç–æ–≤
  private async handleAvailableSubscriptions(chatId: number) {
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∏–Ω–¥–µ–∫—Å –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –æ—Ç–∫—Ä—ã—Ç–∏–∏
    this.subscriptionsPage.set(chatId, 0);
    await this.showAvailableSubscriptions(chatId);
  }

  // –ü–æ–∫–∞–∑–∞—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∞–±–æ–Ω–µ–º–µ–Ω—Ç—ã —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
  private async showAvailableSubscriptions(chatId: number) {
    try {
      const tariffs = await prisma.tariff.findMany({
        orderBy: { price: 'asc' }
      });

      if (!tariffs || tariffs.length === 0) {
        const message = '‚ùå –î–æ—Å—Ç—É–ø–Ω—ã–µ –∞–±–æ–Ω–µ–º–µ–Ω—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.';
        const keyboard = {
          inline_keyboard: [
            [{ text: 'üîô –ö –∏—Å—Ç–æ—Ä–∏–∏', callback_data: 'subscription_history' }],
            [{ text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'back_to_menu' }]
          ]
        };

        await this.sendOrEditWithWelcomePhoto(chatId, message, keyboard);
        return;
      }

      const currentIndex = this.subscriptionsPage.get(chatId) || 0;
      const tariff = tariffs[currentIndex];
      const totalTariffs = tariffs.length;

      let message = `üìú **–î–æ—Å—Ç—É–ø–Ω—ã–µ –∞–±–æ–Ω–µ–º–µ–Ω—Ç—ã**`;
      
      if (totalTariffs > 1) {
        message += ` (${currentIndex + 1}/${totalTariffs})`;
      }
      
      message += `\n\nüè∑Ô∏è **–ù–∞–∑–≤–∞–Ω–∏–µ:** ${tariff.name}`;
      message += `\nüí∞ **–¶–µ–Ω–∞:** ${tariff.price} ‚ÇΩ`;
      message += `\nüìÖ **–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è:** ${tariff.duration} –º–µ—Å.`;
      message += `\nüî¢ **–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å–µ—â–µ–Ω–∏–π:** ${tariff.durationDays} –¥–Ω–µ–π`;
      message += `\n‚è∞ **–í—Ä–µ–º—è –¥–æ—Å—Ç—É–ø–∞:** ${tariff.startTime} - ${tariff.endTime}`;
      message += `\nüßä **–ó–∞–º–æ—Ä–æ–∑–∫–∏:** ${tariff.freezeLimit} –¥–Ω–µ–π`;
      
      // –û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –ø—Ä–µ–¥—É—Å–º–æ—Ç—Ä–µ–Ω–æ –≤ –º–æ–¥–µ–ª–∏
      if (false) {
        // –û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –ø—Ä–µ–¥—É—Å–º–æ—Ç—Ä–µ–Ω–æ –≤ –º–æ–¥–µ–ª–∏
      }

      // –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –Ω–∞–≤–∏–≥–∞—Ü–∏–µ–π
      const keyboard: any = { inline_keyboard: [] };

      // –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∞–±–æ–Ω–µ–º–µ–Ω—Ç–æ–≤ –±–æ–ª—å—à–µ –æ–¥–Ω–æ–≥–æ)
      if (totalTariffs > 1) {
        const navButtons = [];
        if (currentIndex > 0) {
          navButtons.push({ text: '‚¨ÖÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∏–π', callback_data: 'subscriptions_prev' });
        }
        if (currentIndex < totalTariffs - 1) {
          navButtons.push({ text: '–°–ª–µ–¥—É—é—â–∏–π ‚û°Ô∏è', callback_data: 'subscriptions_next' });
        }
        if (navButtons.length > 0) {
          keyboard.inline_keyboard.push(navButtons);
        }
      }

      // –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
      keyboard.inline_keyboard.push([
        { text: 'üîô –ö –∏—Å—Ç–æ—Ä–∏–∏', callback_data: 'subscription_history' },
        { text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'back_to_menu' }
      ]);

      await this.sendOrEditWithWelcomePhoto(chatId, message, keyboard);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞–±–æ–Ω–µ–º–µ–Ω—Ç–æ–≤:', error);
      const errorMessage = '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∞–±–æ–Ω–µ–º–µ–Ω—Ç–æ–≤.';
      const keyboard = {
        inline_keyboard: [
          [{ text: 'üîô –ö –∏—Å—Ç–æ—Ä–∏–∏', callback_data: 'subscription_history' }],
          [{ text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'back_to_menu' }]
        ]
      };
      await this.sendOrEditWithWelcomePhoto(chatId, errorMessage, keyboard);
    }
  }

  // –ü—Ä–µ–¥—ã–¥—É—â–∏–π –∞–±–æ–Ω–µ–º–µ–Ω—Ç
  private async handleSubscriptionsPrev(chatId: number) {
    const currentIndex = this.subscriptionsPage.get(chatId) || 0;
    if (currentIndex > 0) {
      this.subscriptionsPage.set(chatId, currentIndex - 1);
      await this.showAvailableSubscriptions(chatId);
    }
  }

  // –°–ª–µ–¥—É—é—â–∏–π –∞–±–æ–Ω–µ–º–µ–Ω—Ç
  private async handleSubscriptionsNext(chatId: number) {
    const tariffs = await prisma.tariff.findMany();
    const currentIndex = this.subscriptionsPage.get(chatId) || 0;
    
    if (currentIndex < tariffs.length - 1) {
      this.subscriptionsPage.set(chatId, currentIndex + 1);
      await this.showAvailableSubscriptions(chatId);
    }
  }

  // –û—Ç–ø—Ä–∞–≤–∫–∞ –∏–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ñ–æ—Ç–æ –∏–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
  private async sendOrEditWithWelcomePhoto(chatId: number, message: string, keyboard: any) {
    const imageUrl = await this.getWelcomeImageUrl();
    
    if (imageUrl) {
      // –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
      const edited = await this.editLastMediaMessage(chatId, imageUrl, message, keyboard);
      if (!edited) {
        // –ï—Å–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å —Ñ–æ—Ç–æ
        await this.sendPhoto(chatId, imageUrl, message, keyboard);
      }
    } else {
      // –ï—Å–ª–∏ —Ñ–æ—Ç–æ –Ω–µ—Ç, –ø—ã—Ç–∞–µ–º—Å—è –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–∞–∫ —Ç–µ–∫—Å—Ç
      const edited = await this.editLastMessage(chatId, message, keyboard);
      if (!edited) {
        // –ï—Å–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ
        await this.sendTextMessage(chatId, message, keyboard);
      }
    }
  }

  // –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏–∑ JSON —Å—Ç—Ä–æ–∫–∏
  private extractImageUrls(photoUrl: string | null): string[] {
    if (!photoUrl) return [];
    
    try {
      // –ü—ã—Ç–∞–µ–º—Å—è —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –∫–∞–∫ JSON
      const urls = JSON.parse(photoUrl);
      return Array.isArray(urls) ? urls : [photoUrl];
    } catch (e) {
      // –ï—Å–ª–∏ –Ω–µ JSON, –∑–Ω–∞—á–∏—Ç —ç—Ç–æ –æ–¥–∏–Ω–æ—á–Ω—ã–π URL
      return [photoUrl];
    }
  }

  // –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ç–æ —Å –ø–æ–¥–ø–∏—Å—å—é –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
  private async sendPhoto(chatId: number, photoUrl: string, caption: string, keyboard: any) {
    if (!this.bot) return;

    try {
      const sentMessage = await this.bot.sendPhoto(chatId, photoUrl, {
        caption: caption,
        reply_markup: keyboard
      });
      this.addMessageToHistory(chatId, sentMessage.message_id);
      this.setLastBotMessage(chatId, sentMessage.message_id, true); // true = —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–æ—Ç–æ
      return sentMessage;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ç–æ:', error);
      // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
      await this.sendMessage(chatId, caption, { reply_markup: keyboard });
    }
  }

  // –£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–∫—Ä–æ–º–µ /start)
  private async deletePreviousMessages(chatId: number) {
    const messageIds = this.lastMessages.get(chatId) || [];
    
    for (const messageId of messageIds) {
      try {
        await this.bot?.deleteMessage(chatId, messageId);
      } catch (error) {
        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è (—Å–æ–æ–±—â–µ–Ω–∏–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —É–∂–µ —É–¥–∞–ª–µ–Ω–æ)
      }
    }
    
    // –û—á–∏—â–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è
    this.lastMessages.set(chatId, []);
    // –û—á–∏—â–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ—Å–ª–µ–¥–Ω–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ –±–æ—Ç–∞
    this.lastBotMessage.delete(chatId);
  }

  // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ ID —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
  private addMessageToHistory(chatId: number, messageId: number) {
    const messageIds = this.lastMessages.get(chatId) || [];
    messageIds.push(messageId);
    this.lastMessages.set(chatId, messageIds);
  }

  // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ ID –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –±–æ—Ç–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
  private setLastBotMessage(chatId: number, messageId: number, hasPhoto: boolean = false) {
    this.lastBotMessage.set(chatId, { messageId, hasPhoto });
  }

  // –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –±–æ—Ç–∞
  private async editLastMessage(chatId: number, text: string, keyboard?: any) {
    const lastMessage = this.lastBotMessage.get(chatId);
    
    if (lastMessage && this.bot) {
      try {
        if (lastMessage.hasPhoto) {
          // –ï—Å–ª–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–æ—Ç–æ, —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –ø–æ–¥–ø–∏—Å—å
          await this.bot.editMessageCaption(text, {
            chat_id: chatId,
            message_id: lastMessage.messageId,
            reply_markup: keyboard,
            parse_mode: 'Markdown'
          });
        } else {
          // –ï—Å–ª–∏ –æ–±—ã—á–Ω–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
          await this.bot.editMessageText(text, {
            chat_id: chatId,
            message_id: lastMessage.messageId,
            reply_markup: keyboard,
            parse_mode: 'Markdown'
          });
        }
        return true;
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
        return false;
      }
    }
    return false;
  }

  // –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–µ–¥–∏–∞ —Å–æ–æ–±—â–µ–Ω–∏—è (—Ñ–æ—Ç–æ, –ø–æ–¥–ø–∏—Å—å, –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞)
  private async editLastMediaMessage(chatId: number, photoUrl: string, caption: string, keyboard?: any) {
    const lastMessage = this.lastBotMessage.get(chatId);
    
    if (lastMessage && this.bot) {
      try {
        // –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –º–µ–¥–∏–∞ (—Ñ–æ—Ç–æ)
        await this.bot.editMessageMedia({
          type: 'photo',
          media: photoUrl,
          caption: caption,
          parse_mode: 'Markdown'
        }, {
          chat_id: chatId,
          message_id: lastMessage.messageId,
          reply_markup: keyboard
        });
        return true;
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –º–µ–¥–∏–∞ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
        return false;
      }
    }
    return false;
  }



  // –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —É–º–Ω–æ–π –∑–∞–º–µ–Ω–æ–π
  private async sendTextMessage(chatId: number, text: string, keyboard?: any) {
    const lastMessage = this.lastBotMessage.get(chatId);
    
    if (lastMessage?.hasPhoto) {
      // –ï—Å–ª–∏ –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –±—ã–ª–æ —Å —Ñ–æ—Ç–æ, —É–¥–∞–ª—è–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ
      await this.deletePreviousMessages(chatId);
      await this.sendMessage(chatId, text, {
        parse_mode: 'Markdown',
        reply_markup: keyboard
      });
    } else if (lastMessage) {
      // –ü—ã—Ç–∞–µ–º—Å—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
      const edited = await this.editLastMessage(chatId, text, keyboard);
      if (!edited) {
        // –ï—Å–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
        await this.sendMessage(chatId, text, {
          parse_mode: 'Markdown',
          reply_markup: keyboard
        });
      }
    } else {
      // –ù–µ—Ç –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
      await this.sendMessage(chatId, text, {
        parse_mode: 'Markdown',
        reply_markup: keyboard
      });
    }
  }

  // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º ID
  private async sendMessage(chatId: number, text: string, options?: any) {
    if (!this.bot) return;

    try {
      const sentMessage = await this.bot.sendMessage(chatId, text, options);
      this.addMessageToHistory(chatId, sentMessage.message_id);
      this.setLastBotMessage(chatId, sentMessage.message_id, false); // false = —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
      return sentMessage;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
    }
  }

  // –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞
  public stop() {
    if (this.bot && this.isRunning) {
      this.bot.stopPolling();
      this.isRunning = false;
      if (process.env.NODE_ENV !== 'production') {
        console.log('üõë –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π Telegram –±–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
      }
    }
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –±–æ—Ç–∞
  public isActive(): boolean {
    return this.isRunning;
  }
}

// –°–æ–∑–¥–∞–Ω–∏–µ –∏ —ç–∫—Å–ø–æ—Ä—Ç —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –±–æ—Ç–∞
export const userTelegramBot = new UserTelegramBot();
export default UserTelegramBot;