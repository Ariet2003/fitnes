import TelegramBot, { Message, CallbackQuery } from 'node-telegram-bot-api';
import { prisma } from '../lib/prisma';

class UserTelegramBot {
  private bot: TelegramBot | null = null;
  private botToken: string | null = null;
  private isRunning = false;
  private lastMessages: Map<number, number[]> = new Map(); // chatId -> messageIds[]
  private lastBotMessage: Map<number, { messageId: number, hasPhoto: boolean }> = new Map(); // chatId -> lastBotMessage info

  constructor() {
    this.init();
  }

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
  private async init() {
    try {
      const token = await this.getBotToken();
      this.bot = new TelegramBot(token, { polling: true });
      this.setupHandlers();
      this.isRunning = true;
      console.log('ü§ñ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π Telegram –±–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ');
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –±–æ—Ç–∞:', error);
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –±–æ—Ç–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
  private async getBotToken(): Promise<string> {
    if (this.botToken) {
      return this.botToken;
    }

    try {
      const setting = await prisma.setting.findUnique({
        where: { key: 'admin_bot_token' }
      });

      if (!setting?.value) {
        throw new Error('–¢–æ–∫–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ Telegram –±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ admin_bot_token —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ —Ç–∞–±–ª–∏—Ü–µ Setting.');
      }

      this.botToken = setting.value;
      return this.botToken;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ Telegram –±–æ—Ç–∞ –∏–∑ –ë–î:', error);
      throw error;
    }
  }

  // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥
  private setupHandlers() {
    if (!this.bot) return;

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
    this.bot.onText(/\/start/, async (msg: Message) => {
      const chatId = msg.chat.id;
      const telegramId = msg.from?.id?.toString();
      const firstName = msg.from?.first_name || '';
      const lastName = msg.from?.last_name || '';
      const username = msg.from?.username || '';

      console.log(`üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${firstName} ${lastName} (@${username}) –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞. Telegram ID: ${telegramId}`);

      if (!telegramId) {
        await this.sendMessage(chatId, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤–∞—à–µ–≥–æ Telegram ID. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
        return;
      }

      try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        const existingClient = await prisma.client.findUnique({
          where: { telegramId: telegramId },
          include: {
            subscriptions: {
              where: { status: 'active' },
              include: { tariff: true }
            }
          }
        });

        if (existingClient) {
          // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
          // –ù–ï —É–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –≤—Ö–æ–¥–µ (–∫–æ–º–∞–Ω–¥–∞ /start)
          await this.sendWelcomeMenu(chatId, existingClient.fullName);
        } else {
          // –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ —Å –µ–≥–æ ID
          await this.sendNewUserMessage(chatId, telegramId, firstName, lastName);
        }
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã /start:', error);
        await this.sendMessage(chatId, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.');
      }
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é
    this.bot.on('callback_query', async (query: CallbackQuery) => {
      const chatId = query.message?.chat.id;
      const data = query.data;
      const telegramId = query.from.id.toString();

      if (!chatId || !data) return;

      try {
        await this.bot!.answerCallbackQuery(query.id);

        // –î–ª—è –∫–Ω–æ–ø–æ–∫ –ø—ã—Ç–∞–µ–º—Å—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–º–µ—Å—Ç–æ —É–¥–∞–ª–µ–Ω–∏—è
        switch (data) {
          case 'subscription':
            await this.handleSubscriptionInfo(chatId, telegramId);
            break;
          case 'subscription_history':
            await this.handleSubscriptionHistory(chatId, telegramId);
            break;
          case 'qr_code':
            await this.handleQRCode(chatId, telegramId);
            break;
          case 'feedback':
            await this.handleFeedback(chatId, telegramId);
            break;
          case 'contacts':
            await this.handleContacts(chatId);
            break;
          case 'products':
            await this.handleProducts(chatId);
            break;
          case 'back_to_menu':
            const client = await prisma.client.findUnique({
              where: { telegramId: telegramId }
            });
            if (client) {
              // –î–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –ø—ã—Ç–∞–µ–º—Å—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
              await this.handleBackToMenu(chatId, client.fullName);
            }
            break;
        }
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ callback query:', error);
        await this.sendMessage(chatId, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
      }
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ª—é–±—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–∫—Ä–æ–º–µ –∫–æ–º–∞–Ω–¥)
    this.bot.on('message', async (msg: Message) => {
      // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã
      if (msg.text?.startsWith('/')) return;
      
      const chatId = msg.chat.id;
      
      // –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–∏ –ª—é–±–æ–º –Ω–æ–≤–æ–º —Ç–µ–∫—Å—Ç–µ
      await this.deletePreviousMessages(chatId);
      
      // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É –æ–±—ã—á–Ω—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∑–¥–µ—Å—å
      // –ù–∞–ø—Ä–∏–º–µ—Ä, –¥–ª—è –æ—Ç–∑—ã–≤–æ–≤ –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ polling
    this.bot.on('polling_error', (error: Error) => {
      console.error('–û—à–∏–±–∫–∞ polling –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –±–æ—Ç–∞:', error);
    });
  }

  // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–æ–≤–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
  private async sendNewUserMessage(chatId: number, telegramId: string, firstName: string, lastName: string) {
    const name = `${firstName} ${lastName}`.trim() || '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å';
    
    const message = `üëã –ü—Ä–∏–≤–µ—Ç, ${name}!

–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à —Ñ–∏—Ç–Ω–µ—Å-–∫–ª—É–±! 

üÜî –í–∞—à Telegram ID: \`${telegramId}\`

–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º —Ñ—É–Ω–∫—Ü–∏—è–º –±–æ—Ç–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –∫–ª—É–±–∞ –∏ —Å–æ–æ–±—â–∏—Ç–µ –µ–º—É —ç—Ç–æ—Ç ID. –ü–æ—Å–ª–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤ —Å–∏—Å—Ç–µ–º–µ –≤—ã —Å–º–æ–∂–µ—Ç–µ:

‚Ä¢ –ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–≤–æ–µ–º –∞–±–æ–Ω–µ–º–µ–Ω—Ç–µ
‚Ä¢ –ü–æ–ª—É—á–∞—Ç—å QR-–∫–æ–¥ –¥–ª—è –ø–æ—Å–µ—â–µ–Ω–∏—è
‚Ä¢ –û—Å—Ç–∞–≤–ª—è—Ç—å –æ—Ç–∑—ã–≤—ã –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
‚Ä¢ –ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç—ã –∫–ª—É–±–∞
‚Ä¢ –£–∑–Ω–∞–≤–∞—Ç—å –æ –Ω–∞—à–∏—Ö –ø—Ä–æ–¥—É–∫—Ç–∞—Ö

–£–≤–∏–¥–∏–º—Å—è –≤ –∑–∞–ª–µ! üí™`;

    await this.sendMessage(chatId, message, { parse_mode: 'Markdown' });
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
  private async handleBackToMenu(chatId: number, fullName: string) {
    const message = `üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, ${fullName}!

–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª:`;

    const keyboard = {
      inline_keyboard: [
        [
          { text: 'üìù –ê–±–æ–Ω–µ–º–µ–Ω—Ç', callback_data: 'subscription' },
          { text: 'üì± QR-–∫–æ–¥', callback_data: 'qr_code' }
        ],
        [
          { text: 'üí¨ –û—Ç–∑—ã–≤—ã', callback_data: 'feedback' },
          { text: 'üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã', callback_data: 'contacts' }
        ],
        [
          { text: 'üõçÔ∏è –ü—Ä–æ–¥—É–∫—Ç—ã', callback_data: 'products' }
        ]
      ]
    };

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–∞—è –∫–∞—Ä—Ç–∏–Ω–∫–∞
    const imageUrl = await this.getWelcomeImageUrl();
    const lastMessage = this.lastBotMessage.get(chatId);
    
    if (imageUrl) {
      // –ï—Å–ª–∏ –µ—Å—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫–∞, –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Å —Ñ–æ—Ç–æ
      if (lastMessage?.hasPhoto) {
        // –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –ø–æ–¥–ø–∏—Å—å –∫ —Ñ–æ—Ç–æ
        const edited = await this.editLastMessage(chatId, message, keyboard);
        if (!edited) {
          await this.sendWelcomeMenu(chatId, fullName);
        }
      } else {
        // –ü–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—ã–ª–æ —Ç–µ–∫—Å—Ç–æ–≤—ã–º, –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ
        await this.deletePreviousMessages(chatId);
        await this.sendPhoto(chatId, imageUrl, message, keyboard);
      }
    } else {
      // –ï—Å–ª–∏ –Ω–µ—Ç –∫–∞—Ä—Ç–∏–Ω–∫–∏, –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Ç–µ–∫—Å—Ç–æ–≤–æ–µ
      if (lastMessage?.hasPhoto) {
        // –ü—Ä–µ–¥—ã–¥—É—â–µ–µ –±—ã–ª–æ —Å —Ñ–æ—Ç–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ
        await this.deletePreviousMessages(chatId);
        await this.sendMessage(chatId, message, { reply_markup: keyboard });
      } else {
        // –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        const edited = await this.editLastMessage(chatId, message, keyboard);
        if (!edited) {
          await this.sendMessage(chatId, message, { reply_markup: keyboard });
        }
      }
    }
  }

  // –û—Ç–ø—Ä–∞–≤–∫–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é (—Ç–æ–ª—å–∫–æ –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ –≤—Ö–æ–¥–∞)
  private async sendWelcomeMenu(chatId: number, fullName: string) {
    const message = `üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, ${fullName}!

–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª:`;

    const keyboard = {
      inline_keyboard: [
        [
          { text: 'üìù –ê–±–æ–Ω–µ–º–µ–Ω—Ç', callback_data: 'subscription' },
          { text: 'üì± QR-–∫–æ–¥', callback_data: 'qr_code' }
        ],
        [
          { text: 'üí¨ –û—Ç–∑—ã–≤—ã', callback_data: 'feedback' },
          { text: 'üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã', callback_data: 'contacts' }
        ],
        [
          { text: 'üõçÔ∏è –ü—Ä–æ–¥—É–∫—Ç—ã', callback_data: 'products' }
        ]
      ]
    };

    // –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫—É —Å —Ç–µ–∫—Å—Ç–æ–º –∫–∞–∫ –ø–æ–¥–ø–∏—Å—å—é
    const imageUrl = await this.getWelcomeImageUrl();
    if (imageUrl) {
      await this.sendPhoto(chatId, imageUrl, message, keyboard);
    } else {
      // –ï—Å–ª–∏ –∫–∞—Ä—Ç–∏–Ω–∫–∏ –Ω–µ—Ç, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
      await this.sendMessage(chatId, message, { reply_markup: keyboard });
    }
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∞–±–æ–Ω–µ–º–µ–Ω—Ç–µ
  private async handleSubscriptionInfo(chatId: number, telegramId: string) {
    try {
      const client = await prisma.client.findUnique({
        where: { telegramId: telegramId },
        include: {
          subscriptions: {
            where: { status: 'active' },
            include: { 
              tariff: true,
              visits: {
                orderBy: { visitDate: 'desc' }
              }
            },
            orderBy: { createdAt: 'desc' }
          }
        }
      });

      if (!client || client.subscriptions.length === 0) {
        const message = '‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞–±–æ–Ω–µ–º–µ–Ω—Ç–æ–≤.';
        const keyboard = {
          inline_keyboard: [[{ text: 'üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é', callback_data: 'back_to_menu' }]]
        };

        await this.sendTextMessage(chatId, message, keyboard);
        return;
      }

      const subscription = client.subscriptions[0];
      const tariff = subscription.tariff;

      const startDate = new Date(subscription.startDate).toLocaleDateString('ru-RU');
      const endDate = new Date(subscription.endDate).toLocaleDateString('ru-RU');
      const remainingDays = subscription.remainingDays;
      
      // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å–µ—â–µ–Ω–∏–π
      const totalVisits = subscription.visits.length;
      const remainingVisits = Math.max(0, tariff.durationDays - totalVisits);

      const message = `üìù –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∞—à–µ–º –∞–±–æ–Ω–µ–º–µ–Ω—Ç–µ:

üè∑Ô∏è **–¢–∞—Ä–∏—Ñ:** ${tariff.name}
üí∞ **–°—Ç–æ–∏–º–æ—Å—Ç—å:** ${tariff.price} ‚ÇΩ
‚è∞ **–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã:** ${tariff.startTime} - ${tariff.endTime}
üìÖ **–°—Ç–∞—Ä—Ç –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞:** ${startDate}
üìÖ **–î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ:** ${endDate}
‚è≥ **–û—Å—Ç–∞–ª–æ—Å—å –ø–æ—Å–µ—â–µ–Ω–∏–π:** ${remainingVisits}
üßä **–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ –∑–∞–º–æ—Ä–æ–∑–æ–∫:** ${subscription.freezeUsed}/${tariff.freezeLimit}

${remainingDays <= 7 ? '‚ö†Ô∏è –í–∞—à –∞–±–æ–Ω–µ–º–µ–Ω—Ç —Å–∫–æ—Ä–æ –∏—Å—Ç–µ–∫–∞–µ—Ç! –ù–µ –∑–∞–±—É–¥—å—Ç–µ –ø—Ä–æ–¥–ª–∏—Ç—å.' : ''}`;

      const keyboard = {
        inline_keyboard: [
          [{ text: 'üìú –ò—Å—Ç–æ—Ä–∏—è –∞–±–æ–Ω–µ–º–µ–Ω—Ç–æ–≤', callback_data: 'subscription_history' }],
          [{ text: 'üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é', callback_data: 'back_to_menu' }]
        ]
      };

      // –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–º–Ω—É—é –æ—Ç–ø—Ä–∞–≤–∫—É —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
      await this.sendTextMessage(chatId, message, keyboard);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∞–±–æ–Ω–µ–º–µ–Ω—Ç–µ:', error);
      const errorMessage = '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∞–±–æ–Ω–µ–º–µ–Ω—Ç–µ.';
      const edited = await this.editLastMessage(chatId, errorMessage);
      if (!edited) {
        await this.sendMessage(chatId, errorMessage);
      }
    }
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ –∞–±–æ–Ω–µ–º–µ–Ω—Ç–æ–≤
  private async handleSubscriptionHistory(chatId: number, telegramId: string) {
    try {
      const client = await prisma.client.findUnique({
        where: { telegramId: telegramId },
        include: {
          subscriptions: {
            where: { status: { in: ['completed', 'active'] } },
            include: { tariff: true },
            orderBy: { createdAt: 'desc' },
            take: 4 // –ë–µ—Ä–µ–º 4 (–∞–∫—Ç–∏–≤–Ω—ã–π + 3 –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö)
          }
        }
      });

      if (!client || client.subscriptions.length <= 1) {
        const message = 'üìú –ò—Å—Ç–æ—Ä–∏—è –∞–±–æ–Ω–µ–º–µ–Ω—Ç–æ–≤ –ø—É—Å—Ç–∞.\n\n–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –∞–±–æ–Ω–µ–º–µ–Ω—Ç–æ–≤.';
        const keyboard = {
          inline_keyboard: [
            [{ text: 'üîô –ö –∞–±–æ–Ω–µ–º–µ–Ω—Ç—É', callback_data: 'subscription' }],
            [{ text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'back_to_menu' }]
          ]
        };

        await this.sendTextMessage(chatId, message, keyboard);
        return;
      }

      let message = 'üìú **–ò—Å—Ç–æ—Ä–∏—è –≤–∞—à–∏—Ö –∞–±–æ–Ω–µ–º–µ–Ω—Ç–æ–≤:**\n\n';
      
      client.subscriptions.forEach((subscription, index) => {
        const tariff = subscription.tariff;
        const startDate = new Date(subscription.startDate).toLocaleDateString('ru-RU');
        const endDate = new Date(subscription.endDate).toLocaleDateString('ru-RU');
        const status = subscription.status === 'active' ? 'üü¢ –ê–∫—Ç–∏–≤–Ω—ã–π' : '‚ö™ –ó–∞–≤–µ—Ä—à—ë–Ω';
        
        message += `**${index + 1}. ${tariff.name}** ${status}\n`;
        message += `üìÖ ${startDate} - ${endDate}\n`;
        message += `üí∞ ${tariff.price} ‚ÇΩ\n`;
        if (index < client.subscriptions.length - 1) {
          message += '\n';
        }
      });

      const keyboard = {
        inline_keyboard: [
          [{ text: 'üîô –ö –∞–±–æ–Ω–µ–º–µ–Ω—Ç—É', callback_data: 'subscription' }],
          [{ text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'back_to_menu' }]
        ]
      };

      await this.sendTextMessage(chatId, message, keyboard);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏ –∞–±–æ–Ω–µ–º–µ–Ω—Ç–æ–≤:', error);
      const errorMessage = '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏ –∞–±–æ–Ω–µ–º–µ–Ω—Ç–æ–≤.';
      const edited = await this.editLastMessage(chatId, errorMessage);
      if (!edited) {
        await this.sendMessage(chatId, errorMessage);
      }
    }
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ QR-–∫–æ–¥–∞
  private async handleQRCode(chatId: number, telegramId: string) {
    try {
      const client = await prisma.client.findUnique({
        where: { telegramId: telegramId },
        include: {
          subscriptions: {
            where: { status: 'active' },
            orderBy: { createdAt: 'desc' }
          }
        }
      });

      if (!client || client.subscriptions.length === 0) {
        const message = '‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞–±–æ–Ω–µ–º–µ–Ω—Ç–æ–≤ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è QR-–∫–æ–¥–∞.';
        const keyboard = {
          inline_keyboard: [[{ text: 'üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é', callback_data: 'back_to_menu' }]]
        };

        await this.sendTextMessage(chatId, message, keyboard);
        return;
      }

      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º QR-–∫–æ–¥ –¥–ª—è –ø–æ—Å–µ—â–µ–Ω–∏—è
      const qrCode = `QR_${client.id}_${Date.now()}`;
      
      const message = `üì± –í–∞—à QR-–∫–æ–¥ –¥–ª—è –ø–æ—Å–µ—â–µ–Ω–∏—è:

\`${qrCode}\`

–ü–æ–∫–∞–∂–∏—Ç–µ —ç—Ç–æ—Ç –∫–æ–¥ –Ω–∞ —Ä–µ—Å–µ–ø—à–µ–Ω–µ –¥–ª—è –ø—Ä–æ—Ö–æ–¥–∞ –≤ –∑–∞–ª.

‚è∞ –ö–æ–¥ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –≤ —Ç–µ—á–µ–Ω–∏–µ 24 —á–∞—Å–æ–≤.`;

      const keyboard = {
        inline_keyboard: [
          [{ text: 'üîÑ –û–±–Ω–æ–≤–∏—Ç—å –∫–æ–¥', callback_data: 'qr_code' }],
          [{ text: 'üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é', callback_data: 'back_to_menu' }]
        ]
      };

      await this.sendTextMessage(chatId, message, keyboard);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ QR-–∫–æ–¥–∞:', error);
      const errorMessage = '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ QR-–∫–æ–¥–∞.';
      const edited = await this.editLastMessage(chatId, errorMessage);
      if (!edited) {
        await this.sendMessage(chatId, errorMessage);
      }
    }
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–∑—ã–≤–æ–≤ –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
  private async handleFeedback(chatId: number, telegramId: string) {
    const message = `üí¨ –û—Ç–∑—ã–≤—ã –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏

–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏ –º—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —Ä–∞—Å—Å–º–æ—Ç—Ä–∏–º –µ–≥–æ.

–í—ã –º–æ–∂–µ—Ç–µ:
‚Ä¢ –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤ –æ —Ä–∞–±–æ—Ç–µ –∫–ª—É–±–∞
‚Ä¢ –°–æ–æ–±—â–∏—Ç—å –æ –ø—Ä–æ–±–ª–µ–º–∞—Ö
‚Ä¢ –ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å —É–ª—É—á—à–µ–Ω–∏—è
‚Ä¢ –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏

–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–µ–¥—É—é—â–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º.`;

    const keyboard = {
      inline_keyboard: [[{ text: 'üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é', callback_data: 'back_to_menu' }]]
    };

    await this.sendTextMessage(chatId, message, keyboard);

    // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–∞–∫ –æ—Ç–∑—ã–≤–∞
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤
  private async handleContacts(chatId: number) {
    try {
      const contacts = await prisma.contact.findFirst();

      if (!contacts) {
        const message = '‚ùå –ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.';
        const keyboard = {
          inline_keyboard: [[{ text: 'üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é', callback_data: 'back_to_menu' }]]
        };

        await this.sendTextMessage(chatId, message, keyboard);
        return;
      }

      const socialLinks = contacts.socialLinks as any;
      let socialText = '';
      
      if (socialLinks) {
        if (socialLinks.instagram) socialText += `üì∏ [Instagram](${socialLinks.instagram})\n`;
        if (socialLinks.vk) socialText += `üîµ [–í–ö–æ–Ω—Ç–∞–∫—Ç–µ](${socialLinks.vk})\n`;
        if (socialLinks.telegram) socialText += `üì± [Telegram](${socialLinks.telegram})\n`;
      }

      const message = `üìû **–ö–æ–Ω—Ç–∞–∫—Ç—ã —Ñ–∏—Ç–Ω–µ—Å-–∫–ª—É–±–∞**

üì± **–¢–µ–ª–µ—Ñ–æ–Ω:** ${contacts.phone}
üìç **–ê–¥—Ä–µ—Å:** ${contacts.address}

${socialText}

üó∫Ô∏è [–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∞ –∫–∞—Ä—Ç–µ](${contacts.mapLink})`;

      const keyboard = {
        inline_keyboard: [[{ text: 'üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é', callback_data: 'back_to_menu' }]]
      };

      await this.sendTextMessage(chatId, message, keyboard);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤:', error);
      const errorMessage = '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ–Ω—Ç–∞–∫—Ç–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.';
      const edited = await this.editLastMessage(chatId, errorMessage);
      if (!edited) {
        await this.sendMessage(chatId, errorMessage);
      }
    }
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–¥—É–∫—Ç–æ–≤
  private async handleProducts(chatId: number) {
    try {
      const products = await prisma.product.findMany({
        orderBy: { createdAt: 'desc' }
      });

      if (products.length === 0) {
        const message = '‚ùå –ü—Ä–æ–¥—É–∫—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.';
        const keyboard = {
          inline_keyboard: [[{ text: 'üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é', callback_data: 'back_to_menu' }]]
        };

        await this.sendTextMessage(chatId, message, keyboard);
        return;
      }

      let message = 'üõçÔ∏è **–ù–∞—à–∏ –ø—Ä–æ–¥—É–∫—Ç—ã:**\n\n';

      products.forEach((product, index) => {
        message += `${index + 1}. **${product.name}**\n`;
        message += `   üí∞ –¶–µ–Ω–∞: ${product.price} ‚ÇΩ\n`;
        message += `   üìù ${product.description}\n\n`;
      });

      message += '–î–ª—è –∑–∞–∫–∞–∑–∞ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.';

      const keyboard = {
        inline_keyboard: [[{ text: 'üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é', callback_data: 'back_to_menu' }]]
      };

      await this.sendTextMessage(chatId, message, keyboard);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ–¥—É–∫—Ç–æ–≤:', error);
      const errorMessage = '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø—Ä–æ–¥—É–∫—Ç–æ–≤.';
      const edited = await this.editLastMessage(chatId, errorMessage);
      if (!edited) {
        await this.sendMessage(chatId, errorMessage);
      }
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ URL –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–π –∫–∞—Ä—Ç–∏–Ω–∫–∏
  private async getWelcomeImageUrl(): Promise<string | null> {
    try {
      const setting = await prisma.setting.findUnique({
        where: { key: 'welcome_image_url' }
      });
      return setting?.value || null;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ URL –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–π –∫–∞—Ä—Ç–∏–Ω–∫–∏:', error);
      return null;
    }
  }

  // –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ç–æ —Å –ø–æ–¥–ø–∏—Å—å—é –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
  private async sendPhoto(chatId: number, photoUrl: string, caption: string, keyboard: any) {
    if (!this.bot) return;

    try {
      const sentMessage = await this.bot.sendPhoto(chatId, photoUrl, {
        caption: caption,
        reply_markup: keyboard
      });
      this.addMessageToHistory(chatId, sentMessage.message_id);
      this.setLastBotMessage(chatId, sentMessage.message_id, true); // true = —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–æ—Ç–æ
      return sentMessage;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ç–æ:', error);
      // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
      await this.sendMessage(chatId, caption, { reply_markup: keyboard });
    }
  }

  // –£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–∫—Ä–æ–º–µ /start)
  private async deletePreviousMessages(chatId: number) {
    const messageIds = this.lastMessages.get(chatId) || [];
    
    for (const messageId of messageIds) {
      try {
        await this.bot?.deleteMessage(chatId, messageId);
      } catch (error) {
        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è (—Å–æ–æ–±—â–µ–Ω–∏–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —É–∂–µ —É–¥–∞–ª–µ–Ω–æ)
      }
    }
    
    // –û—á–∏—â–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è
    this.lastMessages.set(chatId, []);
  }

  // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ ID —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
  private addMessageToHistory(chatId: number, messageId: number) {
    const messageIds = this.lastMessages.get(chatId) || [];
    messageIds.push(messageId);
    this.lastMessages.set(chatId, messageIds);
  }

  // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ ID –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –±–æ—Ç–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
  private setLastBotMessage(chatId: number, messageId: number, hasPhoto: boolean = false) {
    this.lastBotMessage.set(chatId, { messageId, hasPhoto });
  }

  // –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –±–æ—Ç–∞
  private async editLastMessage(chatId: number, text: string, keyboard?: any) {
    const lastMessage = this.lastBotMessage.get(chatId);
    
    if (lastMessage && this.bot) {
      try {
        if (lastMessage.hasPhoto) {
          // –ï—Å–ª–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–æ—Ç–æ, —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –ø–æ–¥–ø–∏—Å—å
          await this.bot.editMessageCaption(text, {
            chat_id: chatId,
            message_id: lastMessage.messageId,
            reply_markup: keyboard,
            parse_mode: 'Markdown'
          });
        } else {
          // –ï—Å–ª–∏ –æ–±—ã—á–Ω–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
          await this.bot.editMessageText(text, {
            chat_id: chatId,
            message_id: lastMessage.messageId,
            reply_markup: keyboard,
            parse_mode: 'Markdown'
          });
        }
        return true;
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
        return false;
      }
    }
    return false;
  }



  // –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —É–º–Ω–æ–π –∑–∞–º–µ–Ω–æ–π
  private async sendTextMessage(chatId: number, text: string, keyboard?: any) {
    const lastMessage = this.lastBotMessage.get(chatId);
    
    if (lastMessage?.hasPhoto) {
      // –ï—Å–ª–∏ –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –±—ã–ª–æ —Å —Ñ–æ—Ç–æ, —É–¥–∞–ª—è–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ
      await this.deletePreviousMessages(chatId);
      await this.sendMessage(chatId, text, {
        parse_mode: 'Markdown',
        reply_markup: keyboard
      });
    } else {
      // –ü—ã—Ç–∞–µ–º—Å—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
      const edited = await this.editLastMessage(chatId, text, keyboard);
      if (!edited) {
        await this.sendMessage(chatId, text, {
          parse_mode: 'Markdown',
          reply_markup: keyboard
        });
      }
    }
  }

  // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º ID
  private async sendMessage(chatId: number, text: string, options?: any) {
    if (!this.bot) return;

    try {
      const sentMessage = await this.bot.sendMessage(chatId, text, options);
      this.addMessageToHistory(chatId, sentMessage.message_id);
      this.setLastBotMessage(chatId, sentMessage.message_id, false); // false = —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
      return sentMessage;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
    }
  }

  // –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞
  public stop() {
    if (this.bot && this.isRunning) {
      this.bot.stopPolling();
      this.isRunning = false;
      console.log('üõë –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π Telegram –±–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
    }
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –±–æ—Ç–∞
  public isActive(): boolean {
    return this.isRunning;
  }
}

// –°–æ–∑–¥–∞–Ω–∏–µ –∏ —ç–∫—Å–ø–æ—Ä—Ç —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –±–æ—Ç–∞
export const userTelegramBot = new UserTelegramBot();
export default UserTelegramBot;
